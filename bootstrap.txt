



#TODO
.table с .table-responsive{-sm|-md|-lg|-xl}, 
#nav
ol - li


#flex



#padding #margin #отступы
https://bootstrap-4.ru/docs/4.3.1/utilities/spacing/




<ul class="nav nav-tabs">
      <li class="nav-item">
        <a class="nav-link active" href="#">Active</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Link</a>
      </li>
      <li class="nav-item">
        <a class="nav-link disabled" href="#">Disabled</a>
      </li>
    </ul>











--------------------------------------------------------
 очень маленький экран, этот класс применяется всегда и в дополнение к нему может применяться еще 1 из следующих
sm маленький экран
md средний экран
lg большой экран
xl очень большой экран
sm-4  -- здесь 4- это ширина в колонках
md-auto  --по ширине содержимого



#color
– primary - синий
– secondary  - серый
– success - зеленый
– danger - красный
– warning - желтый
– info - другой синий
- light - почти белый
– dark - черный
--не для всего:
-body - совсем черный
-muted-светло серый
-white- белый
black-50 - серый
white-50- серый

.bg-success
. #text-success




#отображение

.d-{value} для xs
.d-{breakpoint}-{value} где breakpoint --> sm, md, lg и xl.

Где value – это одно из:
none
inline
inline-block
block
table
table-cell
table-row
flex
inline-flex

Медиа-запросы влияют на ширину экрана, начиная с указанного брейкпонта или больше.
<div class="d-inline p-2 bg-primary text-white">d-inline</div>




что бы убрать #отступы #padding
.nopadding {
   padding: 0 !important;
   margin: 0 !important;
}






#start #layaut
//то что должно быть в мастре странице(или во всех)

//этот кусок фиксит инпуты на ранних версих андройда
<script>
$(function () {
  var nua = navigator.userAgent
  var isAndroid = (nua.indexOf('Mozilla/5.0') > -1 && nua.indexOf('Android ') > -1 && nua.indexOf('AppleWebKit') > -1 && nua.indexOf('Chrome') === -1)
  if (isAndroid) {
    $('select.form-control').removeClass('form-control').css('width', '100%')
  }
})
</script>



это надо добавить в css для установки box-sizing с content-box на border-box .. и делаем это так что бы не сломать внешние длл
.selector-for-some-widget {
  box-sizing: content-box;
}












#install
установка для nodejs
npm install bootstrap
//установка через yarn----> yarn add bootstrap

require('bootstrap') ) загрузит все плагины JS Bootstrap в объект jQuery





#html

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <title>Hello, world!</title>
  </head>
  <body>
    <h1>Hello, world!</h1>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  </body>
</html>
























http://bootstrap-3.ru/css.php

#ul #li #list-group #list-group-item #list-group-item-primary

#list-group-flush - убирает все гланицы у элементов, сотавляя только линии между ними, и все эти элементы становятся 100% ширины
#list-group-horizontal .list-group-horizontal-{sm|md|lg|xl}  --сделать список горизонтальным
если добавить #list-group-item-action к всем list-group-item  то при наведении они начнут выделяться

 <ul class="list-group list-group-flush">
    <li class="list-group-item active">Cras justo odio</li>
 <li class="list-group-item disabled">Cras justo odio</li>
<li class="list-group-item list-group-item-primary">Элемент основной группы списков</li>
//можно тег А или кнопку
 <a href="#" class="list-group-item list-group-item-action active">Cras justo odio</a>
  </ul>


list-unstyled   убрать отступы и точки у ul 
list-inline     тоже что list-unstyled  но еще и инлайн отобразит
цвет текста{
text-primary
– primary....

}



#breadcrumb #разделитель #иерархия #список 
#навигационная #цепочка
Home / Library / Data
active - сделает кликабельным+ выделит синим, не актив будет серым
<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="#">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page">Library</li>
  </ol>
</nav>





<ul class="list-group">
  <li class="list-group-item">Cras justo odio</li>

















#img #image{
<img class="img-fluid"/>    картинка нормально отображается / становится адаптивной(сужается и тд)
 img-fluid rounded       закругленные углы для картинки
img-fluid rounded-circle   круглое
float-left выравниваем по краю и вроде бы становится обтекаемой
.img-thumbnail для придания изображению границы 1px
float-left и float-right 
mx-auto d-block по центру
}





#figure #figcaption
если необходимо добавить подпись к изображению
Изображения в figure’s не имеют точного размера, так что удостоверьтесь, что добавили в <img> класс .img-fluid для придания <img> отзывчивости.


<figure class="figure">
  <img src="..." class="figure-img img-fluid rounded" alt="...">
  <figcaption class="figure-caption text-right">A caption for the above image.</figcaption>
</figure>







#Медиа #media  #media-body
способ красиво разместить изображение слева или справа от текста, но не в центре (напрмиер как ава ввк возле сообщения)
в media-body можно вложить еще 1 медиа блок(полный)

если к изображению(или то что на его месте) добавить
#align-self-start  -- оно будет слева-сверху
#align-self-center -- оно будет слева-центр
#align-self-end    -- оно будет слева-низ
картинку также можно перенести в правую часть просто переместив в html

<div class="media">
  <img src="..." class="mr-3" alt="...">
  <div class="media-body">
    <h5 class="mt-0">Media heading</h5>
    Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.
  </div>
</div>


можно так
<ul class="list-unstyled">
  <li class="media">
    <img src="..." class="mr-3" alt="...">
    <div class="media-body">











#TODO
Если вы используете элемент <picture> для привязки множественных элементов <source> к определенному <img>, добавьте классы .img-* в <img>, а не в <picture>.
<picture>
<source srcset="..." type="image/svg+xml">
<img src="..." class="img-fluid img-thumbnail" alt="...">
</picture>















{
#button #кнопки #btn


<button type="button" class="btn btn-default">Default</button>
<button type="button" class="btn btn-primary">Primary</button>
<button type="button" class="btn btn-success">Success</button>
<button type="button" class="btn btn-info">Info</button>
<button type="button" class="btn btn-warning">Warning</button>
<button type="button" class="btn btn-danger">Danger</button>
<button type="button" class="btn btn-link">Ссылка</button>
<button type="button" class="btn btn-primary btn-lg">Большая кнопка</button>
<button type="button" class="btn btn-primary">По умолчанию</button>
<button type="button" class="btn btn-primary btn-sm">Малая кнопка</button>
<button type="button" class="btn btn-primary btn-xs">Очень малая кнопка</button>

//при использовании с ссылкой нужно добавить role="button"
<a href="#" class="btn btn-primary btn-lg active" role="button">Главная ссылка</a>

<button type="button" class="close" aria-hidden="true">&times;</button>     кнопка закрытия
<span class="caret"></span>       кнопка "развернуть"


контурные кнопки, цветом выделяется текст и границы, фона нет #btn-outline
class="btn btn-outline-primary"


размер можно регулировать ДОБАВЛЕНИЕМ классов
btn-lg - большая
btn-sm - маленькая


добавив .btn-block можно сделать кнопку блочным элементом=>станет по ширине родительского блока

если нужно что бы кнопка была всегда в активном состоянии(как будто нажата прямо сейчас) надо добавить класс active и aria-pressed="true"
<a href="#" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Главная ссылка</a>

сделать кнопку неактивной(или что бы она так выглядела пока хз #TODO
<button type="button" class="btn btn-lg btn-primary" disabled>
если хотим сделать так но для тега A то надо добавить класс disabled и добавить атрибут aria-disabled="true"
<a href="#" class="btn btn-primary btn-lg disabled" role="button" aria-disabled="true">Главный линк</a>


для #группировки кнопок #граппировка #group
<div class="btn-group" role="group" aria-label="Basic example">
  <button type="button" class="btn btn-secondary">Left</button>

можно задать размер кнопок в группе сразу всем добавив в див группы класс "btn-group-lg" btn-group-sm


для вертикальной группировки
<div class="btn-group-vertical">






#checkbox
все хорошо только если на нее кликать мышкой, если необходимо изменять другими способами то надо самому добавлять атрибут active
тоже самое что radio которое описано ниже
<div class="btn-group-toggle" data-toggle="buttons">
  <label class="btn btn-secondary active">
    <input type="checkbox" checked autocomplete="off"> Checked
  </label>
</div>



#radio
можно сделать группу радио кнопок в виде обычных кнопок
активная будет выделена только цветом, сами "кружки" радио не будут видны
все хорошо только если на нее кликать мышкой, если необходимо изменять другими способами то надо самом добавлять атрибут active

<div class="btn-group btn-group-toggle" data-toggle="buttons">
  <label class="btn btn-secondary active">
    <input type="radio" name="options" id="option1" autocomplete="off" checked> Active
  </label>
  <label class="btn btn-secondary">
    <input type="radio" name="options" id="option2" autocomplete="off"> Radio
  </label>
  <label class="btn btn-secondary">
    <input type="radio" name="options" id="option3" autocomplete="off"> Radio
  </label>
</div>






#toolbar
группировка схожа с группировкой для пагинации

<div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
  <div class="btn-group mr-2" role="group" aria-label="First group">
    <button type="button" class="btn btn-secondary">1</button>
    <button type="button" class="btn btn-secondary">2</button>
  </div>
//--------------вот тут будет разрыв
  <div class="btn-group mr-2" role="group" aria-label="Second group">
    <button type="button" class="btn btn-secondary">5</button>
  </div>
</div>


}












#input

#input-group-text
сгрупировать несколько в 1 линию без пробелов + чуть поменять для всего стили
можно применить к различным полям ввода (input textarea)
такой сероватый блок перед основным полем для ввода #input-group-prepend  и вот такой после #input-group-append (его надо резместить после input)

<div class="input-group input-group-sm">
    <div class="input-group-prepend">
//...........
    </div>
    <input type="text" class="form-control" placeholder="Input group example" aria-label="Input group example" aria-describedby="btnGroupAddon">
<input type="text" aria-label="Last name" class="form-control">  
</div>


в input-group-text можно засунуть чекбокс
    <div class="input-group-prepend"> можно засунуть чекбокс(возможно в обертке span или label)
<span class="input-group-text">0.00</span>
<span class="input-group-text">0.00</span>
<button class="btn btn-outline-secondary" type="button" id="button-addon1">Кнопка</button>
<div class="dropdown-menu"></div>
<select></select>
<div class="custom-file">
    <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01">
    <label class="custom-file-label" for="inputGroupFile01">Choose file</label>
  </div>










#table


<table class="table table-bordered">
  <thead>
    <tr>
      <th scope="col">Колонка</th>
    </tr>
  </thead>
  <tbody>
//tr- это 1 линия
    <tr>
//th-1 ячейка линии
      <th scope="row">текст </th>
 <td>Jacob</td>
    </tr>
    <tr>
      <th scope="row">2</th>
    </tr>
    <tr>
      <th scope="row">4</th>
//ячейка которая будет суммой 2х ячеик
      <td colspan="2">Larry the Bird</td>
    </tr>
  </tbody>
</table>


Все стили таблиц в BS4 наследуются, что означает, что вложенные таблицы будут стилизованы как родительские

для добавления стилей BS нужно добавить класс table


//атрибут #scope определяет, является ли ячейка заголовком для столбца, строкой или группой столбцов или строк
 <th scope="col">#</th>
col	заголовок столбца
row	заголовок для строки
colgroup	заголовок для группы столбцов
rowgroup	заголовок для группы строк


можно сделать таблицу черной или светлой "table-dark" "thead-light"
//всю таблицу
<table class="table table-dark">
//заголовок
 <thead class="thead-dark">

раскрасс таблицы зеброй #зебра 
бело-серой
<table class="table table-striped">
черно-темносерой
<table class="table table-striped table-dark">



делаем ширину ячейки равной ширине 2х.. но все ячейки кроме этой остаются своей ширины=> эта ячейка просто ЗАНИМАЕТ 2 ячейки
<td colspan="2">Larry the Bird</td>


//если хотим добавить вертикальные #границы #border (изначально их нет)
<table class="table table-bordered table-dark">
//таблица вообще без границ
<table class="table table-borderless">

//добавить выделение строк при наведении
<table class="table table-hover">

//таблица компактнее, за счет меньшего padding
<table class="table table-sm">


//можно расскрасить ряды или отдельный ячейки
//вот так только для светлой темы
<tr class="table-active">...</tr>
<tr><td class="table-active">...</td>

<tr class="table-primary">...</tr>
<tr class="table-secondary">...</tr>
<tr class="table-success">...</tr>
<tr class="table-danger">...</tr>
<tr class="table-warning">...</tr>
<tr class="table-info">...</tr>
<tr class="table-light">...</tr>
<tr class="table-dark">...</tr>

//а вот так можно для темной
<tr class="bg-primary">...</tr>
<tr><td class="bg-primary">...</td>
<tr class="bg-success">...</tr>
<tr class="bg-warning">...</tr>
<tr class="bg-danger">...</tr>
<tr class="bg-info">...</tr>


горизонтальная прокрутка таблиц
<div class="table-responsive">
//если добавить такие суффиксы, то возможность скролить таблицу будет появляться в разное время
<div class="table-responsive-lg">  --раньше всего
<div class="table-responsive-md">
<div class="table-responsive-sm"> -- позже всего


#caption
//это красивая подпись для таблицы
<table class="table">
  <caption>Список пользователей</caption>
  <thead>








 
#select #option #list

можно добавить атрибут multiple для множественного выбора
можно добавить атрибут size="3" , он отвечает за количество элементов которые будет видно(что бы просмотреть остальные надо скролить)
 <select class="custom-select  custom-select-lg" multiple>
        <option selected>Choose...</option>





#dropdown #dropdown-menu #dropdown-item #dropdown-toggle
такая штука полностью скопирует функционал(визуально) select но в данном случае внутри не просто будет выбор а ссылки

".dropdown" - будет выпадать вниз
".dproup" - будет выпадать вверх
dropright - вправо
dropleft - влево

можно выделить цветом-"сделать всегда активным" dropdown-item active 
можно сделать всегда не активным - dropdown-item disabled 

то что выпадает можно выровнять по правой стороне -- 
<div class="dropdown-menu dropdown-menu-right">
можно задать ширину экрана для которого применять
dropdown-menu-lg-right
dropdown-menu-lg-left


 data-offset или data-reference для того что бы сместить тот блок который выпадает
<button type="button" class="btn btn-secondary dropdown-toggle" id="dropdownMenuOffset" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-offset="10,20">Offset</button>
<div class="dropdown-menu" aria-labelledby="dropdownMenuOffset">



<div class="btn-group dropdown">
//если просто нужно что то в виде кнопки при нажатии на которую выпадает список то можно так
  <button class="btn btn-secondary dropdown-toggle btn-danger" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Кнопка выпадающего списка</button>
//если нужен тег А
<a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Выпадающая ссылка</a>

//если нужная кнопка которая разбита на 2 подкнопки, левая с надписью(отдельная кнопка) + справа с треугольником, которая и открывает список(отдельная кнопка) то делаем 2 такие кнопки
<button type="button" class="btn btn-danger">Action</button>
  <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
    <span class="sr-only">Toggle Dropdown</span>
  </button>


  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
    <a class="dropdown-item" href="#">Action</a>
//------аналог #hr #dropdown-divider
<div class="dropdown-divider"></div>  
<button class="dropdown-item" href="#" type="button">Action</button>
</div></div>



//если вот так, то не будет сворачиваться и разворачиваться, всегду будет раскрыта
<div class="dropdown-menu">
//----заголовок
 <h6 class="dropdown-header">Dropdown header</h6>
  <span class="dropdown-item-text">Dropdown item text</span>
  <a class="dropdown-item" href="#">Action</a>
</div>












#form #form-group #form-control #form-check #form-check-input #form-check-label 
#radio #checkbox

//все элементы в строку
<form class="form-inline">


если в форме нужно .row , то лучше так #form-row --  <form><div class="form-row">


<div class="form-group">
      <label for="exampleDropdownFormEmail1">Email address</label>
      <input type="email" class="form-control" aria-describedby="emailHelp" id="exampleDropdownFormEmail1" placeholder="email@example.com">
//---добавит маленький #small серый текст который относится к aria-describedby="emailHelp" 
<small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>   

 </div>
    <div class="form-group">
      <div class="form-check">
        <input type="checkbox" class="form-check-input" id="dropdownCheck">
        <label class="form-check-label" for="dropdownCheck">
          Remember me
        </label>
      </div>
    </div>

можно также применять так(в дополнение к .form-control)
.form-control-lg .....

form-control применяется почти для всех инпутов
для #file пррименяется .form-control-file

//только для чтения #readonly , это просто запретит изменять
<input class="form-control" type="text" placeholder="Readonly input here…" readonly>
//можно вместо readonly добавить disabled
//но если сделать так то будет отображаться как обычный текст
 <input type="text" readonly class="form-control-plaintext" id="staticEmail" value="email@example.com">


для радио и чекбоксов есть disabled
<input class="form-check-input" type="checkbox" value="" id="defaultCheck2" disabled>


//можно разместить в строку чекбоксы или радио добавив к каждому диву .form-check-inline
<div class="form-check form-check-inline">
  <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1">
  <label class="form-check-label" for="inlineCheckbox1">1</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input" type="checkbox" id="inlineCheckbox2" value="option2">
  <label class="form-check-label" for="inlineCheckbox2">2</label>
</div>
<div class="form-check form-check-inline">
  <input class="form-check-input" type="checkbox" id="inlineCheckbox3" value="option3" disabled>
  <label class="form-check-label" for="inlineCheckbox3">3 (disabled)</label>
</div>

//если добавляем радио или чекбокс без лейбла лучше в него засунуть атрибут aria-label="описание инпута"


//если форма горизонтальная то надо добавлять к label --- #col-form-label #col-form-label-sm
<label for="inputEmail3" class="col-sm-2 col-form-label">Email</label>






#range #form-control-range
<form>
  <div class="form-group">
    <label for="formControlRange">Example Range input</label>
    <input type="range" class="form-control-range" id="formControlRange">
  </div>
</form>

//делаем красивым, сам ползунок становится синим на сером фоне
<input type="range" class="custom-range" id="customRange1">

//устанвилваем ренж и велечину шага
<input type="range" class="custom-range" min="0" max="5" step="0.5" id="customRange2">



#checkbox
<div class="custom-control custom-checkbox">
  <input type="checkbox" class="custom-control-input" id="customCheck1">
  <label class="custom-control-label" for="customCheck1">Check this custom checkbox</label>
</div>





#radio
<div class="custom-control custom-radio">
  <input type="radio" id="customRadio1" name="customRadio" class="custom-control-input">
  <label class="custom-control-label" for="customRadio1">Toggle this custom radio</label>
</div>
<div class="custom-control custom-radio">
  <input type="radio" id="customRadio2" name="customRadio" class="custom-control-input">
  <label class="custom-control-label" for="customRadio2">Or toggle this other custom radio</label>
</div>





#переключатели #control
кликаешь переключается вправо, еще раз переключается влево
<div class="custom-control custom-switch">
  <input type="checkbox" class="custom-control-input" id="customSwitch1">
  <label class="custom-control-label" for="customSwitch1">Toggle this switch element</label>
</div>




#file
<div class="custom-file">
  <input type="file" class="custom-file-input" id="customFile">
  <label class="custom-file-label" for="customFile">Choose file</label>
</div>







#valide #validete #validation 

//помечаем что форма должна валидироваться, и изначально скрываем ошибки
<form class="needs-validation" novalidate>
<input type="text" class="form-control" id="validationCustom01" placeholder="Имя" value="Mark" required>
//---будет показано если валидация успешна, если не успешно то будет скрыто
      <div class="valid-feedback">
        Looks good!
      </div>
<input type="text" class="form-control" id="validationCustom03" placeholder="City" required>
//---будет показано если валидация НЕ успешна  , а если успешна то скрыта    
<div class="invalid-feedback">
        Please provide a valid city.
      </div>

<button class="btn btn-primary" type="submit">Submit form</button>




//сообщения можно стилизовать под всплывающие подсказки     #valid-feedback--->> #valid-tooltip
//у родительского элемента должно быть position:relative
      <input type="text" class="form-control" id="validationTooltip01" placeholder="Имя" value="Mark" required>
      <div class="valid-tooltip">
        Looks good!
      </div>








<script>
// Example starter JavaScript for disabling form submissions if there are invalid fields
(function() {
  'use strict';
  window.addEventListener('load', function() {
    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.getElementsByClassName('needs-validation');
    // Loop over them and prevent submission
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();
</script>



если к форме не добавить class="needs-validation" novalidate  + не добавлять скрипты и блоки <div class="invalid-feedback">
то валидация все равно будет работать, но чуть по другому: будет появляться по 1 сообщению на поле(а не все сразу) и будет выглядеть по разному в каждом браузере

можно самому установить класс для валидности или невалидности #is-invalid #is-valid
<input type="text" class="form-control is-valid" id="validationServer01" placeholder="Имя" value="Mark" required>
      









#border
//если надо включить границу
<span class="border"></span>
<span class="border-top"></span>
<span class="border-right"></span>
<span class="border-bottom"></span>
<span class="border-left"></span>

//если надо исключить границу(указанная не будет отрисована)
<span class="border-0"></span>
<span class="border-top-0"></span>
<span class="border-right-0"></span>
<span class="border-bottom-0"></span>
<span class="border-left-0"></span>


цвета
<span class="border border-primary"></span> border-secondary  border-success border-danger   border-warning  border-info border-light  border-dark  border-white              

изменить форму
<img src="..." alt="..." class="rounded"> rounded-top  rounded-right rounded-bottom rounded-left  rounded-circle rounded-pill rounded-0                    

изменение радиуса
<img src="..." alt="..." class="rounded-sm">








#float

<div class="float-left">К левому краю на всех областях видимости</div><br>
<div class="float-right">К правому краю на всех областях видимости</div><br>
<div class="float-none">Без стороны выравнивания на всех областях видимости</div>
<div class="float-sm-left">К левому краю на областях видимости маленьких SM (small) или шире</div><br>



#clearfix #fix #error
если в блоке есть элементы с #float то внешний блок может сломаться(станет 0px и перестанет включать эти элементы), для фикса надо добавить clearfix
<div class="bg-info clearfix">
  <button type="button" class="btn btn-secondary float-left">Кнопка примера перемещена влево</button>
  <button type="button" class="btn btn-secondary float-right">Кнопка примера перемещена вправо</button>
</div>






#overflow
<div class="overflow-auto">...</div>
<div class="overflow-hidden">...</div>





#position
<div class="position-static">...</div>
<div class="position-relative">...</div>
<div class="position-absolute">...</div>
<div class="position-fixed">...</div>
<div class="position-sticky">...</div>
<div class="sticky-top">...</div>
<div class="fixed-top">...</div>
<div class="fixed-bottom">...</div>





#box-shadow #shadow
<div class="shadow-none p-3 mb-5 bg-light rounded">Без теней</div>
<div class="shadow-sm p-3 mb-5 bg-white rounded">Маленькая тень</div>
<div class="shadow p-3 mb-5 bg-white rounded">Обычная тень</div>
<div class="shadow-lg p-3 mb-5 bg-white rounded">Большая тень</div>






<div class="show">...</div>        скрывает\показывает блок #show #hide #visible #invisible #hidden
<div class="hidden">...</div>
<div class="visible">...</div>
<div class="invisible">...</div>



можно сделать кнопку при нажатии на которую будет скрываться\показываться контент #Collapse


// активаторы которые будут менять видимость
  <a data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">Ссылка с href</a>
  <button type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">Кнопка с data-target</button>
//если при нажатии надо переключать несколько элементов то все оставляем как выше но меняем
data-target=".multi-collapse" aria-controls="multiCollapseExample1 multiCollapseExample2"


<div class="collapse" id="collapseExample"></div>
//при множественном
<div class="collapse multi-collapse" id="multiCollapseExample1">





#accordion #акордион #аккордион

размещены заголовки, при нажатии на любой появляется его тело а все остальные тела прячутся
завязано именно на card
data-parent="#accordionExample" ---- вот из за этого атрибуту все в родительском элементе будут скрываться кроме того который мы открыли

<div class="accordion" id="accordionExample">
  <div class="card">
    <div class="card-header" id="headingOne">
      <h5 class="mb-0">
        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
          Разворачиваемая панель #1
        </button>
      </h5>
    </div>
    <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordionExample">
      <div class="card-body">
        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
      </div>
    </div>
  </div>
  <div class="card">
    <div class="card-header" id="headingTwo">
      <h5 class="mb-0">
        <button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
          Разворачиваемая панель #2
        </button>
      </h5>
    </div>
    <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample">
      <div class="card-body">
        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
      </div>
    </div>
  </div>
  
</div>


.collapse прячет содержимое
.collapse .show показывает содержимое
.collapsing добавляется, когда переход начинается и удаляется с его завершением

$('.collapse').collapse()










//#container элемент который содержит другие элементы
<div class="container">
.container-fluid  -- контейнер с 100% шириной





<div class="text-center">   по центру то что внутри #text #center
text-left
text-right справа
text-muted - сделает текст #серым #серый #gray
text-white
<p class="text-sm-left">

будет перестраивать текст под блоки(колонки и тдтд)
<p class="text-justify"

//если слишком длинная строка (например МММ...МММ) то она ничего не сломает а просто будет переноситься
<p class="text-break">


//регистр
<p class="text-lowercase">Текст в нижнем регистре.</p>
<p class="text-uppercase">Текст в верхнем регистре.</p>
<p class="text-capitalize">разноРеГиСТровый текст.</p>  ---- меняет первую букву каждого слова на заглавную

//изменить жирность шрифта
<p class="font-weight-bold">Жирный текст.</p>
<p class="font-weight-normal">Нормальный текст.</p>
<p class="font-weight-light">Легкий текст.</p>
<p class="font-italic">Курсивный текст.</p>


//ширина каждого символа одинакова
<p class="text-monospace">Это моноширинный текст</p>


//текст будет обернут - блок станет как можно меньше но так что бы текст полностью уместился, антагонист .text-nowrap
<div class="badge badge-primary text-wrap" style="width: 6rem;">
  This text should wrap.
</div>



//если добавить в блок с текстом при заданной ширине блока, текст будет обрезан и добавлено многоточие
Требует display: inline-block или display: block.
.text-truncate


//заставить цвет текста наследоваться от родителя
<p class="text-muted">
  Muted text with a <a href="#" class="text-reset">reset link</a>.</p>


#a #link #ссылка
удалить текстовое оформление для ссылки
<a href="#" class="text-decoration-none">Non-underlined link</a>


//вертикальное выравнивание текста в строке
<span class="align-baseline">baseline</span>
<span class="align-top">top</span>
<span class="align-middle">middle</span>
<span class="align-bottom">bottom</span>
<span class="align-text-top">text-top</span>
<span class="align-text-bottom">text-bottom</span>


серый цвет+ прижимается к тому что сверху
<p class="help-block">   

//маленький текст
<small>11 mins ago</small>








<div class="checkbox">   в див засовываем чекбоксы
<div class="radio"> в див засовываем радиобаттоны
<label class="checkbox-inline"> в каждом таком блоке по 1 чекбоксу
<input class="form-control" id="disabledInput" type="text" placeholder="Disabled input here..." disabled>   "отключает"
{
задаем стиль
<div class="form-group has-success">    если добавить класс has-feedback то не только выделение цветом, но и иконки соответсвующие будут
.has-warning, .has-error, или .has-success     
<label class="control-label" for="inputSuccess1">Успешный ввод</label>   связывается с input

}
<div class="row">  вложенные дивы будут в строку и по col-xs-2 можно менять длину
  <div class="col-xs-2">






#cart #карточки #card
получается такой вертикальный квадрат . 
может содержать что угодно, есть серая граница для мейн дива
растягивается по ширине на 100%, так что надо задавать ширину

#card-body - должен быть всегда, содержит основной контент
#card-img-top - для изображвения
#card-text - текст карточки
#card-header - header- то что выше названия карточки
#card-img-top - независимо от того сверху или снизу надо разместить, если надо перместить то просто переместить в html #card-img
#card-title -название карточки

также в .card можно засунуть блок .row со всеми вытекающими (можно например сделать горизонтально-вертикальную карточку)

если необходимо засунуть ссылки то 
 <a href="#" class="card-link">Ссылка карты</a>


<div class="card" style="width: 18rem;">
<div class="card-header">Featured</div>
  <img src="..." class="card-img-top" alt="...">
  <div class="card-body">
    <h5 class="card-title">Название карточки</h5>
    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
    <a href="#" class="btn btn-primary">Переход куда-нибудь</a>
  </div>
</div>


если нужен полноценный футер
<div class="card-footer text-muted">
    2 days ago
  </div>



если изображение нужно сделать фоном, убираем -top у картинки и добавляем дивы #card-img #card-img-overlay
<img src="..." class="card-img" alt="...">
  <div class="card-img-overlay">
    <h5 class="card-title">Название карточки</h5>




в card-header  можно засунуть что то типо вкладок
<ul class="nav nav-tabs card-header-tabs">
      <li class="nav-item">
        <a class="nav-link active" href="#">Active</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Link</a>
      </li>
      <li class="nav-item">
        <a class="nav-link disabled" href="#">Disabled</a>
      </li>
    </ul>

или просто список кнопок
<ul class="nav nav-pills card-header-pills">
      <li class="nav-item">
        <a class="nav-link active" href="#">Active</a>
      </li>



можно изменить цвет фона и текста
<div class="card text-white bg-primary mb-3" style="max-width: 18rem;">

можно сделать фон светлым и изменить цвет границ+текста? не изменить цвет между телом и хэдером

<div class="card border-primary mb-3" style="max-width: 18rem;">
 <div class="card-body text-primary">
это не изменит цвет между боди и header+footer
 <div class="card-header bg-transparent border-success">Header</div>




можно объеденить в группы
карты будут прикреплены друг к другу
если есть футеры хэдеры и тд то все они будут располагаться на 1 уровне
<div class="card-group">

тоже самое что и группировка, но карты не прикреплены друг к другу
<div class="card-deck">


если надо располагать колонками
<div class="card-columns">
  <div class="card">

//#TODO я не нашел этого в примере 
Внимание! Размеры карточек могут быть разными, поэтому положение колонок тоже может разниться. Чтобы карточки не выходили из колонок, задайте display: inline-block, т.к. column-break-inside: avoid не совсем рабочее решение.
.card-columns {
  @include media-breakpoint-only(lg) {
    column-count: 4;
  }
  @include media-breakpoint-only(xl) {
    column-count: 5;
  }
}








#Jumbotron
похоже на то что появляется когда открываешь в 1 раз проект asp.net
что то похожее на card но визуально больше к томе что можно просто на страницу закинуть
Легкий, гибкий компонент для демонстрации ключевого содержимого вашего сайта.

<div class="jumbotron">
  <h1 class="display-4">Привет, мир!</h1>
  <p class="lead">Это простой пример блока с компонентом в стиле jumbotron для привлечения дополнительного внимания к содержанию или информации.</p>
  <hr class="my-4">
  <p>Использются служебные классы для типографики и расстояния содержимого в контейнере большего размера.</p>
  <p class="lead">
    <a class="btn btn-primary btn-lg" href="#" role="button">Learn more</a>
  </p>
</div>


на всю ширину и без закругленных углов
<div class="jumbotron jumbotron-fluid">
  <div class="container">
    <h1 class="display-4">Fluid jumbotron</h1>
    <p class="lead">Это модифицированный jumbotron, который занимает все горизонтальное пространство своего родителя.</p>
  </div>
</div>













#pagination #пагинация

<nav aria-label="info"> //--так рекомендуется делать
<ul class="pagination  pagination-lg justify-content-center">
// <li class="page-item disabled">
//<li class="page-item active" aria-current="page">
  <li class="page-item"><a class="page-link" href="#">Previous</a></li>

justify-content-end












#size #page #media #brakepoint #брейкпоинт

//если указывается min-width - то имеется в виду этот размер И БОЛЬШЕ
//если max-width - то имеется в виду этот размер И МЕНЬШЕ
//можно комбинировать
@media (min-width: 576px) and (max-width: 767.98px) { ... }

// Экстрамалые девайсы («телефоны», < 576px)
// Нет @media, т.к. это по умолчанию в Bootstrap

// Малые девайсы («ландшафтные телефоны», >= 576px)
@media (min-width: 576px) { ... }

// Средние девайсы («таблетки», >= 768px)
@media (min-width: 768px) { ... }

// Большие девайсы (десктопы, >= 992px)
@media (min-width: 992px) { ... }

// Экстрабольшие девайсы (большие десктопы, >= 1200px)
@media (min-width: 1200px) { ... }











#size #resize #column #row #container #web #сетка #сеть #col 

Содержимое должно быть расположено в колонках, и только колонки могут быть расположены в рядах.

вся страница делится на 12 колонок. Если больше 12-ти колонок разместить в одном ряду, каждая дополнительная колонка обернется в новую строку
в col можно вложить row


внешний div .container
если элементы в строку то .row   -- если добавить в .row класс .#no-gutters то вы можете удалить марджины margin из рядов и паддинги padding из колонок, его необходимо самому добавить в css
.no-gutters {
    margin-right: 0 /*!important*/;
    margin-left: 0 /*!important*/;
}
.no-gutters > .col,
.no-gutters > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
}

и уже в строке .col-sm  и вот между этими элементами разделится 100% ширины по ровну на каждый
если нужно не равномерно разделять то (тоесть мы можем задать ширину для каждого типа экрана)
.col очень маленький экран, этот класс применяется всегда и в дополнение к нему может применяться еще 1 из следующих
.col-sm маленький экран
.col-md средний экран
.col-lg большой экран
.col-xl очень большой экран
.col-sm-4  -- здесь 4- это ширина в колонках
col-md-auto  --по ширине содержимого

столбцы одинаковой ширины в пределах 1 row можно разбить на несколько строк с помощью .w-100
<div class="row">
    <div class="col">Колонка</div>
    <div class="w-100"></div>
    <div class="col">Колонка</div></div>


если ширина экрана становится слишком маленькой то .col перестают располагаться на 1 строке и каждая колонка встает на отдельную строку

получается, что при маленьком экране ширина 12 колонок а при большом 8
<div class="col-12 col-md-8">.col-12 .col-md-8</div>




для row можно добавить дополнительный класс для того что бы задать как будут размещены элементы внутри. 
//для использования ширина вложенных элементов должна быть ограничена=> допустим 2 таких элемента <div class="col-4">
 <div class="row justify-content-start">  --слева
<div class="row justify-content-center">  -- по центру
 <div class="row justify-content-end">   -- справа
<div class="row justify-content-around">  -- в центре есть небольшой промежуток
<div class="row justify-content-between"> -- в центре есть большой промежуток.. скорее даже разносит блоки по краям

#no-gutters можно добавить в row
уберет пустые места, между столбцами и по краям



//#offset
//.offset-md-4 сдвинет на 4 колонки
//будет блок(4колонки) потом 4 колонки отступа и потом блок(4 колонки)
 <div class="col-md-4">.col-md-4</div>
    <div class="col-md-4 offset-md-4">.col-md-4 .offset-md-4</div>





//если надо изменить #порядок #order
//надо установить некоторый элемент первым, остальные не трогать. ему задаем (устанавливает свойство order: -1)
<div class="col order-first">

//если надо полностью изменить порядок -- сначала идут не упорядоченные, потом по порядку ( 1->2->...)

<div class="col">
<div class="col order-1">
<div class="col order-12">




#size #width 
можно задать ширину в #%
.w-75 - ширина 75% и тд


#height
относительно родительского элемента
<div class="h-25
<div class="h-auto d-inline-block"

.mh-100  --- максимальная высота 100%

.mw-100 - установит высоту и ширину в 100%


Относительно области просмотра


<div class="min-vw-100">Min-width 100vw</div>
<div class="min-vh-100">Min-height 100vh</div>
<div class="vw-100">Width 100vw</div>
<div class="vh-100">Height 100vh</div>








#inline #inline-block
.d-inline-block






//#TODO
ml-auto
mr-auto
col-auto 



//#TODO не понял вообще
<div class="container px-lg-5">
  <div class="row mx-lg-n5">
    <div class="col py-3 px-lg-5 border bg-light">Пользовательская вставка столбцов</div>
    <div class="col py-3 px-lg-5 border bg-light">Пользовательская вставка столбцов</div>
  </div>
</div>










#alert #уведомление
//////вроде переписал https://bootstrap-4.ru/docs/4.3.1/components/alerts/#dismissing

<div class="alert alert-primary" role="alert">
<h4 class="alert-heading">Отличная работа!</h4>
  Это основное уведомление — на синем фоне
устанавливаем соответствие между ссылкой и цветом алерта
<a href="#" class="alert-link">примером ссылки</a>
</div>

alert alert-secondary серый фон
alert alert-success зеленый фон
alert alert-danger красный фон
alert alert-warning желтый фон
alert alert-info другой синий фон
alert alert-light очень светло серый фон
alert alert-dark темно серый фон


//вот так можно включить режим отслеживания кнопки "закрыть"
$(".alert").alert()
//Закрывает уведомление методом удаления его из DOM-структуры.
$().alert('close')
//Уничтожает уведомление элемента.
$().alert('dispose')

//event
close.bs.alert	Это событие запускается немедленно при вызове экземпляра метода close.
closed.bs.alert	Это событие запускается, когда уведомление закрыто (событие будет ждать завершения «переходов» СSS).
$('#myAlert').on('closed.bs.alert', function () {
  // do something…
})

уведомления которое можно закрыть
если закрыть, то оно будет удалено из dom
это потребует util.js.

<div class="alert alert-warning alert-dismissible fade show" role="alert">
  <strong>Holy guacamole!</strong> You should check in on some of those fields below.
  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
    <span aria-hidden="true">&times;</span>
  </button>
</div>









#push #пуш #toast
пуш #уведомления
+util.js.

инициализация $('.toast').toast(option)


//если есть несколько(прям блоки html подряд, то они будут вертикально располагаться



//--обертка для уведомлений
//для внешнего блока можно так class="d-flex justify-content-center align-items-center"
<div aria-live="polite" aria-atomic="true" style="position: relative; min-height: 200px;">
  <!-- Position it -->
  <div style="position: absolute; top: 0; right: 0;">

<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="10000">
  <div class="toast-header">
    <img src="..." class="rounded mr-2" alt="...">
    <strong class="mr-auto">Bootstrap</strong>
    <small class="text-muted">11 mins ago</small>
    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  <div class="toast-body">
    Hello, world! This is a toast message.
  </div>
</div>














#badge #значки #значок #icon #иконка
подстроится под внешний элемент

badge-primary - синий
badge-secondary - темный фон
badge-success
badge-danger
badge-warning
badge-info - другой синий
badge-light - светлый фон
badge-dark

если добавить еще и класс "badge-pill" то границы будут закруглены значительно
если эти значики засунуть в тег A(ссылку) то они будут активными(выглядят как кнопки)

при использовании значков лучше добавлять писание к нему через sr-only .. оно будет не видимо
<h1>Пример заголовка 
<span class="badge badge-secondary">New</span>
<span class="sr-only">описание</span></h1>

//кнопка с надписью и числом похожим на количество сообщений ввк
<button type="button" class="btn btn-primary">
  Уведомления <span class="badge badge-light">4</span>
</button>






#icon #close


<button type="button" class="close" aria-label="Close">
  <span aria-hidden="true">&times;</span>
</button>














#slider #карусель

используется util.js.
и не рекомендуестя к использованию тк не всем поддерживается

как минимум 1 слайд должен быть помечен как active
можно вызвать в ручную $('.carousel').carousel()


можем добавить еще атрибуты, которые повлияют на выполнение, добавляются через data-NAMEATTR
можем изменить интервал пролистывания, по умолчанию 5000. Если false – карусель не будет автоматически сменять слайды.
 <div class="carousel-item active" data-interval="10000">
keyboard - bool - Будет ли карусель реагировать на события клавиатуры. по умолчанию true
pause - string|bool- Если стоит "hover" – смена слайдов тормозится по mouseenter, и начинает смену по mouseleave. Если false – наведение на карусель не остановит смену слайдов. Устройства, активируемые касанием: "hover" – пауза при touchend (когда пользователь закончил взаимодействие с каруселью) на два интервала, потом опять смена слайдов. Заметьте, что это поведение – дополнение к описанному выше поведению мыши. по умолчанию hover
ride - string-Автосмена слайдов карусели после первой ручной смены слайда юзером. Если carousel – автосмена включается после загрузки.? по умолчанию false
wrep - bool-Должна ли карусель сменяться плавно или дискретно. по умолчанию true
touch - bool- Карусель должна поддерживать взаимодействие влево / вправо на сенсорных устройствах. по умолчанию true




//картинки сами перелистываются
//при class="carousel slide" слайды именно листаются, если ДОБАВИТЬ сюда еще и "carousel-fade" то слайды начнут не листаться а как бы растворяться и на их месте появляться новые




<div id="carouselExampleSlidesOnly" class="carousel slide" data-ride="carousel">

//------------добавление кнопок для каждого слайда, если не нужны то просто убрать
<ol class="carousel-indicators">
    <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
    <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
    <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
  </ol>


  <div class="carousel-inner">
    <div class="carousel-item active">
        <img src="..." class="d-block w-100" alt="...">

//если надо добавить надписи к слайду, если не надо то просто убрать.. в данном случае скрываются на малых устройствах, и показываются на средних
<div class="carousel-caption d-none d-md-block">
          <h5>First slide label</h5>
          <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>
        </div>


    </div>
    <div class="carousel-item">
      <img src="..." class="d-block w-100" alt="...">
    </div>
    <div class="carousel-item">
      <img src="..." class="d-block w-100" alt="...">
    </div>
  </div>

//---------- если надо добавить кнопки "далее "назад, если не надо то просто убрать теги А
<a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
  </a>
  <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="sr-only">Next</span>
  </a>


</div>



Инициализирует объект object карусели с установленными параметрами и начинает смену слайдов.
$('.carousel').carousel({
  interval: 2000
})

.carousel('cycle') Сменяет слайды карусели слева направо.
.carousel('pause') Останавливает смену слайдов.
.carousel(number) Прокручивает слайды до определенного момента (основано на 0, схоже с рядами). Возвращает значение функции-вызову до того, как элемент-«цель» показан (т.е. до того, как возникает событие slid.bs.carousel).
.carousel('prev') Прокручивает к предыдущему слайду. Возвращает значение функции-вызову до того, как элемент-«цель» показан (т.е. до того, как возникает событие slid.bs.carousel).
.carousel('next') К следующему слайду. Возвращает значение функции-вызову до того, как элемент-«цель» показан (т.е. до того, как возникает событие slid.bs.carousel).
.carousel('dispose') Уничтожает карусель элемента.

События
Карусель в Bootstrap располагает 2-мя событиями для применения функциональности. У обоих событий есть следующие дополнительные свойства:

direction: Направление, в котором движутся слайды ("left" или "right").
relatedTarget: Элемент DOM, который движется на место «пролистанного» слайда.
from: Индекс текущего слайда
to: Индекс следующего слайда
Все события карусели запускаются непосредственно в карусель (т.е. в <div class="carousel">).
slide.bs.carousel	Это событие запускается немедленно, когда вызван метод slide.
slid.bs.carousel	Это событие запускается, когда карусель завершила переходы своих слайдов.
$('#myCarousel').on('slide.bs.carousel', function () {
  // do something…
})








#progress #process #bar #прогрессбар #бар #процессбар #progress-bar

<div class="progress" style="height: 20px;">
  <div class="progress-bar bg-success" role="progressbar" style="width: 25%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
0%</div>
//---сюда можно засунуть несколько полосок, они будут в 1 линию друг за другом по порядку
</div>

ширину можно и так задать <div class="progress-bar w-75"
можно полосу сделать полосатой #progress-bar-striped а если добавить #progress-bar-animated то будет еще и анимированной  <div class="progress-bar progress-bar-striped progress-bar-animated"













#модальное #дополнительное #окно #modal #alert
окно которое появится при определенных условиях,  и его можно будет закрыть
основное окно блокируется, прокрутка работат на модальное

кнопка для того что бы показать окно
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
  Запустить модальное окно
</button>

можно запустить из js
$('#myModal').modal({keyboard: false})
параметры можно передать объектом в js или атрибутами через data-attrname, все параметры имеют значение true по умолчанию
backdrop- затемненный фон вокруг окна
keyboard - закрывает окно при нажатии на ESC
focus - фокусировка на окне при инициализации
show - показывает окно при инициализации

$('#myModal').modal('toggle') - Вручную изменяет состояние модального элемента
$('#myModal').modal('show') Вручную открывает модальный элемент
$('#myModal').modal('hide') Вручную прячет модальный элемент
$('#myModal').modal('handleUpdate') Вручную обновляет позицию модального элемента, если высота его изменяется во время открытия (т.е. в случае возникновения полосы прокрутки).
$('#myModal').modal('dispose') Уничтожает модальный элемент.


если добавить так то оно будет расположено по центру вертикали
 <div class="modal-dialog modal-dialog-centered" role="document">


//---само окно

<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        //......................
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>


можно использовать сетку
<div class="modal-body">
  <div class="container-fluid">
    <div class="row">



//можно изменить ширину, стандартно ширина 500px
<div class="modal-dialog modal-lg">
sm-300px
lg-800px
xl-1140px








можно немного изменять содержимое(не считая прямое формирование и замену через innerhtml)
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" data-whatever="@mdo">Open modal for @mdo</button>
$('#exampleModal').on('show.bs.modal', function (event) {
  var button = $(event.relatedTarget) // Button that triggered the modal
  var recipient = button.data('whatever') // Extract info from data-* attributes
  // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
  // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
  var modal = $(this)
  modal.find('.modal-title').text('New message to ' + recipient)
  modal.find('.modal-body input').val(recipient)
})












#help #всплывающая #подсказка
при нажатии на кнопку рядом появится окно с текстом, при повторном нажатии пропадет
<p>This <a href="#" role="button" class="btn btn-secondary popover-test" title="Popover title" data-content="Popover body content is set in this attribute.">button</a> triggers a popover on click.</p>
  


#поповер #popover

Таковой плагин использует для позиционирования 3-ю часть библиотеки Popper.js. Чтобы плагин работал, Вы должны подключать popper.min.js ПЕРЕД bootstrap.j + util.js

//включаем $('#example').popover(options) или так
$(function () {
  $('[data-toggle="popover"]').popover(
//сюда можно передать объект или не передавать ничего
)
})

этот объект для параметра, доступно много свойств, посмотреть можно тут https://bootstrap-4.ru/docs/4.3.1/components/popovers/
{container: 'body' ////--это нужно дописать Когда у вас есть некие стили родительского элемента, которые взаимодействуют с поповером
trigger: 'focus'//будет прятать подсказку, если мы кликаем в любое место вне кнопки(в таком случае нужно использовать не button а тег A)
}

data-placement="top"-будет показываться сверху
data-placement="right"
data-placement="bottom"
data-placement="left"

<button type="button" class="btn btn-lg btn-danger" data-placement="top" data-toggle="popover" title="заголовок подсказки" data-content="текст подсказки">текст кнопки</button>

<a tabindex="0" class="btn btn-lg btn-danger" role="button" data-toggle="popover" data-trigger="focus" title="заголовок подсказки" data-content="текст подсказки?">текст кнопки</a>

если элемент с атрибутом "disabled" то поповер перестает работать(можно его перенести в оберточный блок)









#nav  #нацигация #nav-item #nav-link

Заметьте, что навигационные панели, даже если они стилизованы как вкладки классами .nav-tabs, не должны содержать role="tablist", role="tab" или role="tabpanel". 
все меню лучше обернуть в div с role="navigation" или обернуть все в nav


стандартно просто надписи горизонтальные без границ
<ul class="nav">
  <li class="nav-item active">
    <a class="nav-link" href="#">Active</a></li>
  <li class="nav-item">
    <a class="nav-link disabled" href="#">Disabled</a></li>
</ul>

<nav class="nav">  //--если будем добавлять еще классы кроме .nav тут надо будет добавить .nav-item к ссылкам, если не будет работать
  <a class="nav-link active" href="#">Active</a>
  <a class="nav-link disabled" href="#">Disabled</a>
</nav>





//горизонтальный, который станет вертикальным на малых устройствах
<nav class="nav nav-pills flex-column flex-sm-row">
  <a class="flex-sm-fill text-sm-center nav-link active" href="#">Active</a>


//если надо выровнять по центру #justify-content-center <ul class="nav justify-content-center">
по правому краю #justify-content-end

//расположить вертикально #flex-column
<ul class="nav flex-column">

//элементы становятся на всю ширину(каждый может быть разной ширины) <ul class="nav nav-pills nav-fill">
//элементы становятся на всю ширину(каждый одинаковой ширины) <ul class="nav nav-pills nav-justified">

#fade класс что бы элементы появлялись медленно


#подушки #nav-pills
в виде обычных кнопок
<ul class="nav nav-pills">

#вкладки #вкладка #nav-tabs открытая будет с  <a class="nav-link active"
<ul class="nav nav-tabs"> 

в вкладку и подушку можно добавить дроп лист
<li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Dropdown</a>
    <div class="dropdown-menu">
      <a class="dropdown-item" href="#">Action</a>



//если нужны вкладки но не для навигации (просто отображение некоторого блока) отображаться будет именно по href="#home"
//nav-tabs можно заменить на nav-pills  и data-toggle="tab" заменить на data-toggle="pill"и тогда будет тоже самое но подушками
<ul class="nav nav-tabs" id="myTab" role="tablist"> ///----тут можно написать так <nav><div class="nav nav-tabs" id="nav-tab" role="tablist">
  <li class="nav-item">
    <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Home</a>
  </li>
.....
</ul>
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active in" id="home" role="tabpanel" aria-labelledby="home-tab">...</div>
....
</div>


//если нужно вертикально подушками(слева будут подушки вертикально, справа текст)
<div class="row">
  <div class="col-3">
    <div class="nav flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical">
      <a.....<></div></div>
<div class="col-9">
    <div class="tab-content" id="v-pills-tabContent">




можно переключать из js
$('#myTab a[href="#profile"]').tab('show') // Select tab by name
$('#myTab li:first-child a').tab('show') // Select first tab
$('#myTab li:last-child a').tab('show') // Select last tab
$('#myTab li:nth-child(3) a').tab('show') // Select third tab







#navbar
классы:
#navbar-brand для названия вашей компании, продукта или имени проекта. лучше применять к тегу A в который уже можно что то засунуть(картинку например)
#navbar-nav для навигации полной высоты (включая выпадающие элементы).
#navbar-toggler для использования с нашим JS-«плагином свертывания» и других изменяющихся состояний навигации.
#form-inline для любых органов контроля форм и действий с ними.
#navbar-text для добавления вертикально центрированных строк текста.
#collapse #navbar-collapse для группирования и скрытия содержимого навбара на определенном брейкпойнте родителя.


. #fixed-top
. #fixed-bottom
. #sticky-top будет располагаться где то и после прокрутки прилипнет к верху


navbar-light
<nav class="navbar navbar-dark bg-dark">
<nav class="navbar navbar-dark bg-primary">
<nav class="navbar navbar-light" style="background-color: #e3f2fd;">

<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">Navbar</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navbarSupportedContent">
//тут сами пункты можно сделать списком(ul), но можно и без него через div
<div class="navbar-nav">
      <a class="nav-item nav-link active" href="#">Home <span class="sr-only">(current)</span></a></div>
//через список ul
    <ul class="navbar-nav mr-auto">
      <li class="nav-item active">
        <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
      </li>
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          Dropdown
        </a>
        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
          ....
        </div>
      </li>
    </ul>
    <form class="form-inline my-2 my-lg-0">
....
    </form>
  </div>
</nav>




скрывающееся меню при маленьком экране  #Тогглер 

<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">Navbar</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
  <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
    <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
      <li class="nav-item active">
        <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
      </li>
    </ul>
    <form class="form-inline my-2 my-lg-0">
      <input class="form-control mr-sm-2" type="search" placeholder="Search">
      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form>
  </div>
</nav>




если нужен блок который будет открывать содержимое
<div class="pos-f-t">
  <div class="collapse" id="navbarToggleExternalContent">
    <div class="bg-dark p-4">
      //контент который будет закрыт и открываться
    </div>
  </div>
  <nav class="navbar navbar-dark bg-dark">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarToggleExternalContent" aria-controls="navbarToggleExternalContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
  </nav>
</div>







#scroll #scrollspy #скроллспай
можно сделать блок который скролится и ссылки которые будут его скролить так что бы что то в нем отобразилось
+ в меню с помощью которого и отображается что то , в зависимости от того что сейчас отображено, будет выделяться нужный пункт

нужен util.js.

для того элемента где текст
position: relative; 
удостоверьтесь, что задали height и overflow-y: scroll;


<nav id="navbar-example2" class="navbar navbar-light bg-light">
  <a class="navbar-brand" href="#">Navbar</a>

//---если такой список то все будет горизонтально
  <ul class="nav nav-pills">
    <li class="nav-item">
      <a class="nav-link" href="#fat">@fat</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="#mdo">@mdo</a>
    </li>
    <li class="nav-item dropdown">
      <a class="nav-link dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Dropdown</a>
      <div class="dropdown-menu">
        <a class="dropdown-item" href="#one">one</a>
        <a class="dropdown-item" href="#two">two</a>
        <div role="separator" class="dropdown-divider"></div>
        <a class="dropdown-item" href="#three">three</a>
      </div>
    </li>
  </ul>
//--вот так можно сделать вертикальным с блоками(типо кнопок) и вложенными в них блоками
<nav class="nav nav-pills flex-column">
    <a class="nav-link" href="#item-1">Пункт 1</a>
    <nav class="nav nav-pills flex-column">
      <a class="nav-link ml-3 my-1" href="#item-1-1">Пункт 1-1</a>
      <a class="nav-link ml-3 my-1" href="#item-1-2">Пункт 1-2</a>
    </nav>

//--тоже самое что и выше с кнопками но они красиво растянуты
<div id="list-example" class="list-group">
  <a class="list-group-item list-group-item-action" href="#list-item-1">Пункт 1</a>



</nav>
<div data-spy="scroll" data-target="#navbar-example2" data-offset="0">
  <h4 id="fat">@fat</h4>
  <p>...</p>
  <h4 id="mdo">@mdo</h4>
  <p>...</p>
  <h4 id="one">one</h4>
  <p>...</p>
  <h4 id="two">two</h4>
  <p>...</p>
  <h4 id="three">three</h4>
  <p>...</p>
</div>









#preloader #spiner #spinner #Спиннер
круглая черная штука крутится

<div class="spinner-border text-primary spinner-border-sm" role="status">
  <span class="sr-only">Loading...</span>
</div>


круг который из маленького становится большим
<div class="spinner-grow text-primary spinner-grow-sm" role="status">
  <span class="sr-only">Loading...</span>
</div>


.float-right .justify-content-center .m-5 для отступов  или можно обернуть в блок с .text-center


можно засунуть в кнопку
<button class="btn btn-primary" type="button" disabled>
  <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
  Loading...
</button>










#iframe  <#embed>, <#video> и <#object>

<div class="embed-responsive embed-responsive-16by9">
  <iframe class="embed-responsive-item" src="https://www.youtube.com/embed/zpOULjyy-n8?rel=0" allowfullscreen></iframe>
</div>


можно задать соотношение сторон 21 на 9, также доступны 16 на 9, 4 на 3, 1 на 1 
embed-responsive-21by9





















