#html

#отображать #div #текст как он есть  #html #pre>
#<pre></pre>



#html #<> #скобки #><
 <p> будет выглядеть как &lt;p&gt;




#shadow
box-shadow: 0 0 10px rgba(0,0,0,0.5);





#html #div #size #% #width
div1-width 30%
и
div1-width 70%
надо разместить их без пробела </div1>ВОТ ТУТ НЕ ДОЛЖНО БЫТЬ НИЧЕГО<div2>
не умещаются по ширине(перенос на новую строку) в внешний элемент
дивы не умещаются в див
.parent {
/*внешний див В который не умещаются*/
    font-size: 0;
}

.child {
/* это надо для восстановления шрифта к вложенным дивам (которые не умещаются)*/
    font-size: 16px;
}






#image #uploadImage #img

отображение из байтов 
 <div class="div_image_standart" style="background:url( data:image/jpeg;base64,@Convert.ToBase64String(a.Data)) no-repeat;background-size: cover;">
        </div>

растянет очень криво но ничего не обрежет, и пустых мест не будет
<div id="main_tag_one_img_id_@a.Id" class="class_image_standart" style="background:url( data:image/jpeg;base64,@Convert.ToBase64String(a.Data)) no-repeat;background-size: 100% 100%;"> 
</div>

растянет не криво, но только по 1 краю(пропорции остаются), есть пустые места
<div id="main_tag_one_img_id_@a.Id" class="class_image_standart" style="background:url( data:image/jpeg;base64,@Convert.ToBase64String(a.Data)) no-repeat"> 
</div>
.class_image_standart{
    background-position: center;
    background-size: contain;
}

<img src="data:image;base64,@System.Convert.ToBase64String(Model.Image)" />


загрузка картинок на сервер сюда код формы метод для преобразования картинок в байты и тд
@using (Html.BeginForm("Add_new_image", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.Hidden("from", "Personal_record")
                        @Html.Hidden("for_what", "main_img")

                        <input type="file" name="uploadImage[0]" />
                            <input type="submit" class="submit" value="Поделиться" />
                    }







#html5
#атрибуты #attr #atribute

accesskey: определяет клавишу для быстрого доступа к элементу
class: задает класс CSS, который будет применяться к элементу
contenteditable: определяет, можно ли редактировать содержимое элемента
contextmenu: определяет контекстное меню для элемента, которое отображается при нажатии на элемент правой кнопкой мыши
dir: устанавливает направление текста в элементе
draggable: определяет, можно ли перетаскивать элемент
dropzone: определяет, можно ли копировать переносимые данные при переносе на элемент
hidden: скрывает элемент
id: уникальный идентификатор элемента. На веб-странице элементы не должны иметь повторяющихся идентификаторов
lang: определяет язык элемента
spellcheck: указывает, будет ли для данного элемента использоваться проверка правописания
style: задает стиль элемента
tabindex: определяет порядок, в котором по элементам можно переключаться с помощью клавиши TAB
title: устанавливает дополнительное описание для элемента
translate: определяет, должно ли переводиться содержимое элемента

target для <a>  -- позволяет по разному открывать ссылку(фрейм окно и тд)


#tags

<b>: выделяет текст жирным
<del>: зачеркивает текст
<i>: выделяет текст курсивом
<em>: выделяет текст курсивом, в отличие от тега <i> носит логическое значение, придает выделяемому тексту оттенок важности
<s>: зачеркивает текст
<small>: делает текст чуть меньше размером, чем окружающий
<strong>: выделяет текст жирным. В отличие от тега <b> предназначен для логического выделения, чтобы показать важность текста. А <b> не носит характера логического выделения, выполняет функции только форматирования
<sub>: помещает текст под строкой
<sup>: помещает текст над строкой
<u>: подчеркивает текст
<ins>: определяет вставленный (или добавленный) текст
<mark>: выделяет текст цветом, придавая ему оттенок важности


#спойлер с названием и стрелкой #список
 <details>
            <summary>Флагманы 2015</summary>
</details>


внутренняя ссылка на странице #href #link #якорь 
<a href="#paragraph1">Параграф 1</a>
<h2 id="paragraph1">Параграф 1</h2>


#border #fieldset #legend #рамка
выделит красиво в 1 блок(линией по краям) и legend будет заголовком(НА линии и перекрывает ее)
 <fieldset>
                <legend>Введите данные:</legend>
</fieldset>


.article > p{}
только на те элементы которые в .article не включая блоки которые вложены еще в какой то блок 
<div class="article">
            <p>меняется</p>
            <div class="content">
                <p>не меняется</p>
            </div>


.article + p{}   для элемента p который следует за .ar
//возможна комбинация из нескольких +

 h2~div { color: red; }
<h2>Заголовок</h2>
        <p>Аннотация</p>
        <div>
            <p>red</p>
        </div>
        <div>
            <p>red</p>
        </div>




#градиенты #gradient
обязательно юзать -moz-  -webkit-
с левого верхнего угла в противоположный перелив из черного в белый
background-image: linear-gradient(top left,black,white);
20% 80%--- это положение точки, вроде как ширина
background-image: linear-gradient(left, #ccc, red 20%, red 80%, #ccc);
повторяющийся градиент
background-image: repeating-linear-gradient(left, #ccc 20px, red 30px, rgba(0, 0, 126, .5) 40px);

градиент для круга
белый-центр и черный края
background-image: radial-gradient(white, black);
для элипса
radial-gradient(ellipse, white, black);

задать центр   -- 25% от левой границы и 30 от верхней
background-image: radial-gradient(25% 30%, circle, white, black);

closest-side: градиент распространяется из центра только до ближайшей к центру стороне элемента. То есть градиент остается внутри элемента
closest-corner: ширина градиента вычисляется по расстоянию из его центра до ближайшего угла элемента, поэтому градиент может выйти за пределы элемента.
farthest-side: градиент распространяется из центра до самой дальней стороны элемента
farthest-corner: ширина градиента вычисляется по расстоянию из его центра до самого дальнего угла элемента
background-image: radial-gradient(25% 30%, circle farthest-corner, white, black);



#transform
ширина\высота
  transform: scale(2, 0.5);
transform: scale(0.5);
угол
  transform: rotate(30deg);
зеркальное отражение
transform: scaleX(-1);

перемещение
transform: translate(offset_X, offset_Y);
наклон(квердат станет паралелограммом)
  transform: skew(30deg, 10deg);


точка относительно которой трансформация
transform-origin: left top;
left top: левый верхний угол элемента
left bottom: левый нижний угол элемента
right top: правый верхний угол элемента
right bottom: правый нижний угол элемента



#transition
transition-delay: 500ms;
 transition-timing-function: ease-in-out;
linear: линейная функция плавности, изменение свойства происходит равномерно по времени
ease: функция плавности, при которой анимация ускоряется к середине и замедляется к концу, предоставляя более естественное изменение
ease-in: функция плавности, при которой происходит только ускорение в начале
ease-out: функция плавности, при которой происходит только ускорение в конце анимации
ease-in-out: функция плавности, при которой анимация ускоряется к середине и замедляется к концу, предоставляя более естественное изменение
cubic-bezier: для анимации применяется кубическая функция Безье




#keyframes   #frame #function
 animation-name: название_анимации;
animation-iteration-count: 3;  /*количество повторений, может быть   infinite*/
animation-fill-mode: forwards;   /*после выполнения оставить стиль на 100% */
animation-duration: 5s;
animation-direction: alternate;    /*анимация идет 0%->100%  100->0  0->100*/

@keyframes название_анимации {
    from {/*можно 0% вместо from*/
        /* начальные значения свойств CSS */
    }
    to {/*можно 100% вместо to*/
        /* конечные значения свойств CSS */
    }
}











#псевдоклассы #css
 a:not(.blueLink) { color: red; }
все а кроме . сделает красными

//выбирает элемент, который является единственным элементом определенного типа в контейнере.
span:only-of-type{
         
            color: green;   /* зеленый цвет */
        }


: #enabled {   если не установлен атрибут  disabled
: #checked  если установлен атрибут checked          // :checked + span {
 : #valid и : #invalid стилизуют элементы формы в зависимости от того, проходят они валидацию или нет
input:invalid 
            input:valid {
стилизуют элементы формы в зависимости от того, попадает ли их значение в определенный диапазон
: #in-range 
            : #out-of-range {
<input type="number" min="1" max="100" value="10" id="age" name="age"/>


: #optional                Не установлен required
            : #required {  установлен атрибут required





#nth-child позволяет стилизовать каждый второй, третий элемент, только четные или только нечетные элементы и т.д.
tr:nth-child(odd){} для нечетных элементов, 
tr:nth-child(even){} четных элементов в
tr:nth-child(3)  под номером 3
tr:nth-child(2n+1) { background-color: #bbb; } к каждой второй нечетной строке.

tr:nth-last-child(2) {    тоже самое,с конца




first-child: представляет элемент, который является первым дочерним элементом
:#last-child: представляет элемент, который является последним дочерним элементом
:#only-child: представляет элемент, который является единственным дочерним элементом в каком-нибудь контейнере
:#only-of-type: выбирает элемент, который является единственным элементом определенного типа (тега) в каком-нибудь контейнере
:#nth-child(n): представляет дочерний элемент, который имеет определенный номер n, например, второй дочерний элемент
:#nth-last-child(n): представляет дочерний элемент, который имеет определенный номер n, начиная с конца
:#nth-of-type(n): выбирает дочерний элемент определенного типа, который имеет определенный номер
:#nth-last-of-type(n): выбирает дочерний элемент определенного типа, который имеет определенный номер, начиная с конца



::#first-letter: позволяет выбрать первую букву из текста
::#first-line: стилизует первую строку текста
::#before: добавляет сообщение до определенного элемента
::#after: добавляет сообщение после определенного элемента
::#selection: выбирает выбранные пользователем элементы     работает например для выделенного текста


input[type="text"]{
.link[href="http://apple.com"]{
a[href^="https://"]{        начинается с подстроки
img[src$=".jpg"]{           заканчивается
a[href*="microsoft"]{           есть вхождения


В этом случае вне зависимости от наличия других селекторов с большим количеством баллов к ссылкам будет применяться красный цвет, определяемый первым стилем.
a {font-size: 18px; color: red !important;}




#hover #visible #visibility #display
если bl2 находится в bl1
div.bl1:hover div.bl2{
    top:0;
}

для соседних
.block1:hover + .block2 h1 { color: red;}


для как бы не соседних
<div class="one">Name</div>
<div class="two">Surname</div>
<div class="three">Opps</div>
.three {
    color: orange;
}

.one:hover + .two + .three {
    color: green;
}


для не соседних но при условии что они в 1 блоке
 .block1:hover ~ .block2 h1 { color: red;}
<div>
  <div class=block2><h1>нет</h1></div>
  <div class=block1>Проведите надо мной</div>
  <div class=block2><h1>да</h1></div>
</div>




#inline #inline-block #display #div_inline_block #divinlineblock
display: inline-block; 50% каждый див что бы уместились в строку —-»»> просто между блоками удалить все пробелы и переносы строк. т.е. закончился предыдущий div, и сразу же после закрывающего тега нужно вставлять следующий открывающий.
div.div_inline_block {
    display: inline-block;
    vertical-align: top;
}






#Спецсимволы #html #img #image
#стандарт #css #символ #картинка
https://html5book.ru/specsimvoly-html/
css content:'\2718';

#github
content: "\f09b";
content: "\f003"; // почтовый конвернт
content: "\f16c";// #stack #overflow
content: "\f019";//значек загрузки






















