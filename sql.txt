
#SQL

https://www.opennet.ru/docs/RUS/rusql/#ch3
https://jsehelper.blogspot.com/2016/01/sql-2.html и предыдущая статья



Логический порядок обработки инструкции SELECT:

1 FROM
2 ON
3 JOIN
4 where
5 GROUP BY
6 WITH CUBE или WITH ROLLUP
7 HAVING
8 SELECT
9 DISTINCT
10 ORDER BY
11 TOP





#as


переименовываем поле в результате
SELECT *, count(*) AS x,
переименовываем  таблицу в запросе
from news_cat AS nc


получаем текущую дату
SELECT GetDate();

будем рассматривать капсом
WHERE  UPPER(EmpName) 

получаем год
SELECT YEAR(GETDATE()) as "Год";

при обращении к полю сущности можно опускать название таблицы пока используется только 1 (table_name.prop_name)
создание бд
CREATE DATABASE IF NOT EXISTS article;

просмотреть сазданные таблицы
SHOW TABLES; 

сплитить мб в tsql
SELECT value FROM STRING_SPLIT('Lorem ipsum dolor sit amet.', ' ');

если вместо * поля вписать, то вернутся только поля и именно в том порядке в котором указали
вывод всех строк таблицы
SELECT * FROM table1;

вернуть поля по условию
SELECT phone_id, user_id FROM table2 WHERE phone_number=200;
limit - 1 число  включается(будет пропущено 1 строка), и вернется 3 строки
SELECT phone_id, user_id FROM table2 WHERE phone_number=200 LIMIT 1, 3;

убирает дублирующиеся данные в результате выполнения(только если все поля совпали)
SELECT DISTINCT snum FROM Orders;

противоположность DISTINCT, используется по умолчанию
ALL 



WHERE

сложные предикаты

AND берет два булевых значения (в форме A AND B) как аргументы и оценивает, верны ли они оба.
OR берет два булевых значения (в форме A OR B) как аргументы и оценивает, верен ли один из них.
NOT берет одиночное булево значение (в форме NOT A) как аргумент и заменяет его значение с неверного на верное или с верного на неверное (инвертирует).



SELECT  *
FROM Customers
WHERE city = " San Jose'
AND rating > 200;

OR NOT rating > 200;

только к 1 
WHERE NOT city = " San Jose'
                      OR rating > 200;


ко всем
WHERE NOT(city = " San Jose'
                      OR rating > 200);



ОПЕРАТОР IN

выберет все где  city соответствует 1 из значений
SELECT *
          FROM Salespeople
          WHERE city IN ('Barcelona', 'London');

ОПЕРАТОР BETWEEN

все у чего comm находится между .10 и .12 или равно им 
 SELECT *
             FROM Salespeople
             WHERE comm BETWEEN .10 AND .12;

ОПЕРАТОР LIKE

символ подчёркивания ( _ ) замещает любой одиночный символ.
знак процента (%) замещает последовательность любого количества символов (включая символы нуля)

Выбираем из table3 все значения поля room_id, для которых room_number начинается с цифры 3 (% означает любое количество любых символов
SELECT room_id FROM table3 WHERE room_number LIKE '3%';

определяем оператор который указывает на то что используем именно этот символ а не то что он должен делать(то что выше написано)
 SELECT *
             FROM Salespeople
             WHERE sname LIKE '%/_%' ESCAPE '/';



IS NULL
находим все с null полем, просто через = сравнивать нельзя
SELECT *
               FROM Customers
               WHERE city IS NULL;



SELECT *
             FROM Customers
             WHERE city NOT NULL;






создание таблицы
CREATE TABLE `table1` (`user_id` INT(5) NOT NULL AUTO_INCREMENT, `username` VARCHAR(50), PRIMARY KEY(`user_id`), INDEX(`username`));


переименовать таблицу
RENAME TABLE table1 TO nya; 


Переименовать поле user_id в id (таблица table1)
ALTER TABLE table1 CHANGE user_id id INT; 


Меняем тип и атрибут поля phone_number:
ALTER TABLE table2 MODIFY phone_number VARCHAR(100) NOT NULL; 

Просмотр описания таблицы table1:
DESCRIBE table1;


Добавляем поле abra типа DATE:
ALTER TABLE table3 ADD abra  DATE; 

добавление данных
INSERT INTO table1 (username,...) VALUES ('foo',...); 

удаление данных по условию
DELETE FROM table1 WHERE user_id = 1;

обновить запись с условием
UPDATE table2 SET user_id='2', phone_number='200' WHERE phone_id='1';

сортировка по возрастанию
SELECT username FROM table1 ORDER BY username;
несколько столбцов
SELECT *
               FROM Orders
               ORDER BY cnum DESC, amt DESC;



по убыванию
SELECT username FROM table1 ORDER BY username DESC;







АГРЕГАТНЫЕ ФУНКЦИИ

COUNT
выдаёт количество строк или не-NULL значений полей, которые выбрал запрос.

общее количество строк в таблице
SELECT COUNT (*)
 FROM Customers

количество записей конкретного столбца за исключением NULL записей
COUNT(column_name)





SUM
выдаёт арифметическую сумму всех выбранных значений данного поля.
AVG
выдаёт усреднение всех выбранных значений данного поля.
MAX
выдаёт наибольшее из всех выбранных значений данного поля.
MIN
выдаёт наименьшее из всех выбранных значений данного поля.

SELECT AVG (amt)
       FROM Orders;




GROUP BY
TODO


HAVING
TODO



DISTINCT 
используется для указания на то, что следует работать только с уникальными значениями столбца
SELECT DISTINCT column_name FROM table_name









вывод

SELECT snum, sname, city, ' % ', comm * 100
               FROM Salespeople;
 1001   Peel      London       %   12.000000 




#exist
если вернет больше 1 строки то true
SELECT DISTINCT maker
FROM Product AS lap_product
WHERE type = 'laptop' AND 
 EXISTS (SELECT maker
 FROM Product
 WHERE type = 'printer' AND 
 maker = lap_product.maker
 );







JOIN


для 1 таблицы
SELECT e.name, m.name FROM Employee e, Employee m 
WHERE e.mgr_id = m.emp_id;


без join, вроде бы
SELECT Customers.cname, Salespeople.sname
                FROM Customers, Salespeople
                WHERE Salespeople.snum = Customers.snum;
// условия могут быть и такими
WHERE sname < cname
                      AND rating < 200;




несколько join

SELECT table3.room_number FROM table1 
INNER JOIN table2 ON table1.user_id = table2.user_id 
INNER JOIN table3 ON table2.phone_id = table3.phone_id 
WHERE table1.username = 'qux';



FROM
  Table1
  {INNER | {LEFT | RIGHT | FULL} OUTER | CROSS } JOIN
  Table2
    {ON <condition> | USING (field_name [,... n])}



INNER JOIN
соединение 2х таблиц по полю все лишнее отбрасывается
SELECT *
FROM
  Person
  INNER JOIN
  City
    ON Person.CityId = City.Id


LEFT OUTER JOIN
соединеяется все что может соединяться но
все в таблице слева остаются все
те что слева не соединениль null становятся
справа отбрасываются


SELECT *
FROM
  Person -- Левая таблица
  LEFT OUTER JOIN
  City   -- Правая таблица
    ON Person.CityId = City.Id


RIGHT OUTER JOIN
противоположность left


FULL OUTER JOIN
чсоединяет все но также все сохраняет с null


CROSS JOIN
соединяет каждое с каждым




#транзакция

Транзакция предполагает, что все, входящие в нее SQL-запросы будут обязательно выполнены, причем одновременно.

Начать транзакцию можно при помощи команды BEGIN TRANSACTION. Завершить можно либо сохранив изменения в базе данных при помощи команды COMMIT, либо удалив все сделанные транзакцией изменения командой ROLLBACK
При работе с транзакциями возможны 2 варианта:
результаты выполнения всех запросов, входящих в транзакцию, будут применены к базе данных
все внесенные изменения в базу данных будут отменены (откатаны).

BEGIN TRANSACTION
UPDATE user_account SET balance=balance-100 WHERE account_id=1 /* Снимаем деньги со счета,ID которого равен 1 */
UPDATE user_account SET balance=balance+100 WHERE account_id=2 /* И переводим эти деньги на счет, ID которого равен 2 */
COMMIT










#блокировка #lock

Существует 2 вида взаимодействий с базой данных, которые требуют блокировки 2-х разных типов:
Разделяемая блокировка 
Когда пользователь считывает данные, его совершенно не волнует кто эти данные считывает еще. 
При подобных операциях на данные накладывается разделяемая блокировка, которая говорит о том, что любая транзакция может выполнять эту же операцию с данными, т.к. она не изменяет их и не сможет привести ни к каким побочным эффектам.
Монопольная блокировка 
В случае, если выполняемая операция изменяет данные, на них накладывается монопольная блокировка, которая позволяет изменять данные только одному пользователю. 
СУБД не может устанавливать монопольную блокировку на данные, на которые уже установлена разделяемая блокировка. Такое ограничение имеет смысл как для пользователя, который записывает данные, так и для пользователя, который их считывает.




#HAVING
"В чем различие между выражениями HAVING и WHERE"

WHERE - это ограничивающее выражение. Оно выполняется до того, как будет получен результат операции.

HAVING - фильтрующее выражение. Оно применяется к результату операции и выполняется уже после того как этот результат будет получен, в отличии от where.
Выражения WHERE используются вместе с операциями SELECT, UPDATE, DELETE, в то время как HAVING только с SELECT и предложением GROUP BY












































