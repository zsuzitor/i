









#ajax #request
#img #image
var files;
    $('input[type=file]').change(function () {
        files = this.files;
    });
var data = new FormData();
        $.each(files, function (key, value) {
            data.append('uploadImage', value);
        });

        data.append('obj.Text','this is test text');

        $.ajax({
            url: '/Physic/Create',
            type: 'POST',
            data: data,
            cache: false,
            dataType: 'json',
            processData: false, // Не обрабатываем файлы (Don't process the files)
            contentType: false, // Так jQuery скажет серверу что это строковой запрос
            success: function (respond, textStatus, jqXHR) {

                var ttt = 10;
            }
        });




 public ActionResult AddMemePerson(string id_user, HttpPostedFileBase[] uploadImage,string text)
{  
var list_img_byte = Get_photo_post(uploadImage);
}

public static List<byte[]> Get_photo_post(HttpPostedFileBase[] uploadImage)
        {

            /* сохранение картинок как файл ...
              HttpPostedFileBase image = Request.Files["fileInput"];
            
            if (image != null && image.ContentLength > 0 && !string.IsNullOrEmpty(image.FileName))
            {
                string fileName = image.FileName;
                image.SaveAs(Path.Combine(Server.MapPath("Images"), fileName));
            }
             
             * */
            List<byte[]> res = new List<byte[]>();
            if (uploadImage != null)
            {
                foreach (var i in uploadImage)
                {
                    try
                    {
                        byte[] imageData = null;
                        // считываем переданный файл в массив байтов
                        using (var binaryReader = new BinaryReader(i.InputStream))
                        {
                            imageData = binaryReader.ReadBytes(i.ContentLength);
                        }
                        // установка массива байтов
                        res.Add(imageData);
                    }
                    catch
                    {}
                }

            }

            return res;
        }




#uploadfile #upload #file
//получить текст файла
FunctionName(HttpPostedFileBase file) 
{ 
string result = new StreamReader(file.InputStream).ReadToEnd(); 
}


#image #byte #img

//image from byte
public static Image byteArrayToImage(byte[] byteArrayIn)
        {
            MemoryStream ms = new MemoryStream(byteArrayIn);
            Image returnImage = Image.FromStream(ms);
            return returnImage;
        }




#image to byte
//baseFormat = (Image)imageIn.RawFormat
public static byte[] ImageToByteArray(System.Drawing.Image imageIn, ImageFormat baseFormat)
        {
            using (var ms = new MemoryStream())
            {
                //var encoder = GetEncoderInfo("image/jpg");
                imageIn.Save(ms, baseFormat);//System.Drawing.Imaging.ImageFormat.Jpeg 
                return ms.ToArray();
            }
        }









#кэш #кэширование
[OutputCache(Duration=30, Location= OutputCacheLocation.Downstream)]
        public string Index()
        {
CacheProfle: определяет конфигурацию кэширования
Duration: продолжительность кэширования контента в секундах. Важно оптимально подобрать временной отрезок, так как если задать большое значение, то пользователи будут работать практически со статичными данными, а при очень маленьком значении будет слишком часто обновление кэша, что нивелирует преимущества его использования
Location: место, где размещается кэшированный контент
NoStore: если данное значение равно true, в ответе в заголовке Cache-Control устанавливается флаг no-store, что указывает браузеру, что контент не надо сохранять
SqlDependency: определяет зависимость между кэшем и таблицой в бд
VaryByCustom: указывает произвольное значение, по которому будут определяться различные версии кэшированных данных
VaryByHeader="user-agent": указывает на набор заголовков, по которым будут определяться различные версии кэшированных данных
VaryByParam="title;id": указывает на параметры строки запроса или параметры переданных форм, по которым будут определяться различные версии кэшированных данных

Any: контент кэшируется как на клиенте, так и на прокси-сервере и в выходном кэше сервера
Client: контент кэшируется на клиенте
Downstream: контент кэшируется как на клиенте, так и на прокси-сервере. Выходной кэш сервера не используется
None: для заголовка Cache-Control устанавливается значение no-cache, что значит, что контент не будет нигде кэшироваться
Server: контент кэшируется только в выходном кэше сервера
ServerAndClient: контент кэшируется на клиенте и в выходном кэше сервера




mvc 
плагин для добавление автоматической пагинации(переключение страниц, нумерация страниц, Постраничный вывод)
#пагинация #paggination #pagination
https://metanit.com/sharp/mvc5/17.7.php

//загрузка по количеству
db.obj.Skip(Constants.CountForLoad * (loadCount - 1)).Take(Constants.CountForLoad).ToList();
//загрузка по последнему загруженному id, возможно потребуется orderby
db.obj.SkipWhile(x1 => lastId > 0 ? (x1 != lastId) : false).Skip(lastId > 0 ? 1 : 0).Take(Constants.CountForLoad).ToList();










обратная связь с клиентом  #SignalR #hubs

NuGet библиотеку Microsoft ASP.NET SignalR
если в проекте нет класса Startup(там где web.config, не в папках) 
то добавить его если есть то дописать(или дописать в конец файла Startup.Auth.cs 
в метод ConfigureAuth класса Startup тк он вызывается если указана строка  ConfigureAuth(app); 
в файле Startup)  app.MapSignalR();

using Microsoft.Owin;
using Owin;
[assembly: OwinStartup(typeof(SignalRMvc.Startup))]
namespace SignalRMvc
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.MapSignalR();
        }
    }
} 

класс для хранения пользователей
public class User
{
    public string ConnectionId { get; set; }
    public string UserId { get; set; }
}
Теперь добавим в проект новую папку. Назовем ее Hubs. В ней будут находиться хабы нашего приложения. В эту папку добавим новый item(SignalR Hub Class (v2)) ChatHub.cs
//[HubName("stockTickerMini")]  можно изменить имя хаба
 public class ChatHub : Hub
    {
        static List<UserForHub> Users = new List<UserForHub>();
//объявляем методы к которым будем обращаться 
public void Send(int id)
        {
 Clients.Group(groupName).MethodOnClient(id_dialog);//id_dialog- может быть объектом класса, в таком случае конвертится в json и отправляется, на стороне клиента в функцию зайдет сразу объектом а не json строкой
}
 public void JoinToHub()
        {
//добавляем группу если ее нет и добавляем в нее юзера
 Groups.Add(Context.ConnectionId, groupName);
//удаляем
Groups.Remove(Context.ConnectionId, roomName);
}

// Отключение пользователя
        public override System.Threading.Tasks.Task OnDisconnected(bool stopCalled)
        {
            var item = Users.FirstOrDefault(x => x.ConnectionId == Context.ConnectionId);
            if (item != null)
            {
                Users.Remove(item);
                var id = Context.ConnectionId;
                //Clients.All.onUserDisconnected(id);
            }

            return base.OnDisconnected(stopCalled);
        }
}

HTML(в конце боди лучше)
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <!--Ссылка на библиотеку SignalR -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Ссылка на автоматически сгенерированный скрипт хаба SignalR -->
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/util.js"></script>


JS
//методы на стороне сервера нужно вызывать с маленькой буквы
создаем файл util.js

$(function () {
    // Ссылка на автоматически-сгенерированный прокси хаба
    var chat = $.connection.chatHub;

// Объявление функции
    chat.client.MethodOnClient = function (id_dialog) {
}

// Открываем соединение
    $.connection.hub.start().done(function () {
//так вызывается любой метод на сервере
        chat.server.joinToHub();
}
});





полезное:
//id пользователя в Hube
Context.ConnectionId
// Посылаем сообщение текущему пользователю
                Clients.Caller.onConnected(id, userName, Users);
// Посылаем сообщение всем пользователям, кроме текущего
                Clients.AllExcept(id).onNewUserConnected(id, userName);
//всем
Clients.All.addMessage(name, message);



Вызов метода на всех клиентах: Clients.All.addMessage(name, message);
Вызов метода только на текущем клиенте, который обратился к серверу: Clients.Caller.addMessage(name, message);
Вызов метода на всех клиентах, кроме того, который обратился к серверу: Clients.Others.addMessage(name, message);
Вызов метода только у клиента с определенным id: Clients.Client(Context.ConnectionId).addMessage(name, message);
Вызов метода на всех клиентах, кроме клиента с определенным id: Clients.AllExcept(connectionId).addMessage(name, message);
Вызов метода на всех клиентах указанной группы: Clients.Group(groupName).addMessage(name, message);
Вызов метода на всех клиентах указанной группы, за исключением клиента, у которого id - connectionId: Clients.Group(groupName, connectionId).addMessage(name, message);
Вызов метода на всех клиентах указанной группы, за исключением обратившегося к серверу клиента: Clients.OthersInGroup(groupName).addMessage(name, message);


включение логов хабов на стороне клиента
$.connection.hub.logging = true;





для того что бы можно было использовать обычный класс как hub class нужно в него передать(ресурсоемкий процесс)
IHubConnectionContext<dynamic> clients
получить - GlobalHost.ConnectionManager.GetHubContext<StockTickerHub>().Clients










https://metanit.com/sharp/mvc5/16.2.php


#бандлы #bundle/head подлючение скриптов
@Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
более удобное подключение группы скриптов, объединяет несколько скриптов в 1 файл и ускоряет работу и js.js.min делает
в файле BundleConfig.cs
bundles.Add(new ScriptBundle("~/bundles/jquery").Include(
                        "~/Scripts/jquery-{version}.js"));
параметр {version} является заменителем для любого символьного обозначения версии скрипта
"~/Scripts/jquery.validate*" с помощью знака звездочки заменяет остальную часть строки.
Однако само объявление бандлов в файле BundleConfig.cs еще не подключает автоматически их в проект. Для этого в файле Global.asax прописывается соответствующая директива:
protected void Application_Start()
    {
        //..............................................
        BundleConfig.RegisterBundles(BundleTable.Bundles);
    }


бандлы CDN
загрузка скриптов с сайтов
лучше всего проверять загрузился ли скрипт
public static void RegisterBundles(BundleCollection bundles)
        {
            bundles.UseCdn = true;   //включаем поддержку CDN
            // добавляем адрес нужной библиотеки в какой-нибудь сети CDN
            var jqueryCdnPath = "http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.1.min.js";
            bundles.Add(new ScriptBundle("~/bundles/jquery",
                        jqueryCdnPath).Include(
                        "~/Scripts/jquery-{version}.js"));




Минификация
при развертывании приложения ускоряет работу за счет бандлов, делает js.js.min и объединяет файлы
для включения надо отключить #режим #отладки
 В файле web.config меняем на false
<configuration>
  <!--------------------------------------->
  <system.web>
    <authentication mode="None" />
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5" />






для формирования из строки с русскими буквами строку без них(кодирование) (например для запроса на сервер через ссылку)
#encodeURIComponent
(декодирование)
#decodeURIComponent

ActionName

хэш пароля
https://ru.stackoverflow.com/questions/545944/%D0%9A%D0%B0%D0%BA-%D0%B7%D0%B0%D1%88%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BF%D0%B0%D1%80%D0%BE%D0%BB%D0%B8

фильтры атрибуты для методов #attr
RequireHttps-заставляет использовать https
[OutputCache (Duration=360)]-кэширует данные 360 секунд для увеличение работы с бд
ValidateAntiforgeryToken- применять к методам авторизации регистрации




#InternalsVisibleTo
#TODO
[assembly:InternalsVisibleTo("Friend_")]//Friend_ - название дружественной сборки
public class









отправка #статуса #кода #StatusCode 
#404 #200 #500
  return new #HttpStatusCodeResult(404);

Response.StatusCode = (int)HttpStatusCode.BadRequest; 
Response.StatusCode = 404;
return new EmptyResult();
return Content(ex.Message);

return HttpNotFound();
 return new HttpUnauthorizedResult();//#401 - нет доступа


[AllowAnonymous]/ [Authorize]
#controller
string controller_name = ViewContext.RequestContext.RouteData.Values["controller"].ToString(); ;








#AJAX


#AJAX #js #jquery #img #image #post #httppost #uploadImage

html

обычная форма

<form id="commentForm" class="form" method="post"  enctype="multipart/form-data">
    <fieldset>
        <input type="text" id="text" placeholder="text"  name="text">
        <input id="id_user" type="text" placeholder="id_user:"  name="id_user">
        
        <input id="uploadImage" type="file"  name="uploadImage">
        
    </fieldset>
    <input id="button" class="submit" type="submit" value="Отправить" name="submit">
</form>



js



jQuery(document).ready(function () {
        $("#commentForm").submit(function () { return false; });

        $("#button").on("click", function () {

                $(".submit").replaceWith("<div class='form_dscr'><p class='sending'>Отправка...</p></div>");
            //получаем форму
                var form = document.forms.commentForm;

                var formData = new FormData(form);

                var xhr = new XMLHttpRequest();
                xhr.open("POST", "/SocialNetwork/AddMemePerson");

                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) {
                            //при возврате actionresult и тд, вернет -"<html>"
                            var data = xhr.responseText;
                            
                        }
                    }
                };

                xhr.send(formData);

        });
    });


тоже самое но вообще без html и jquery
(это не тестил)

function getXmlHttp() {
    var xmlhttp;
    try {
      xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
    } catch (e) {
    try {
      xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    } catch (E) {
      xmlhttp = false;
    }
    }
    if (!xmlhttp && typeof XMLHttpRequest!='undefined') {
      xmlhttp = new XMLHttpRequest();
    }
    return xmlhttp;
  }
  function summa() {
    var a = document.getElementById("a").value; // Считываем значение a
    var b = document.getElementById("b").value; // Считываем значение b
    var xmlhttp = getXmlHttp(); // Создаём объект XMLHTTP
    xmlhttp.open('POST', 'test.php', true); // Открываем асинхронное соединение
    xmlhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); // Отправляем кодировку
    xmlhttp.send("a=" + encodeURIComponent(a) + "&b=" + encodeURIComponent(b)); // Отправляем POST-запрос
    xmlhttp.onreadystatechange = function() { // Ждём ответа от сервера
      if (xmlhttp.readyState == 4) { // Ответ пришёл
        if(xmlhttp.status == 200) { // Сервер вернул код 200 (что хорошо)
          document.getElementById("summa").innerHTML = xmlhttp.responseText; // Выводим ответ сервера
        }
      }
    };
  }






#get #js
без jquery и ajax

var x = new XMLHttpRequest();
x.open("GET", "/echo/json/", true);
x.onload = function (){
    alert( x.responseText);
}
x.send(null);












можно проверить является ли запрос ajax
!Request.IsAjaxRequest()

#ajax #post #jquery #form #get
оба возвращают сам объект(не надо определять из json)
$.post( "/Info/Add_section", { name: "John", time: "2pm" })
  .done(function( data ) {
    alert( "Data Loaded: " + data );
  });

var dt={'Head':'sdf','parrent_sec_id':'sss'};
            $.ajax({
                url: "/Info/Add_section",
                data:dt,
                
                success: OnComplete_Add_section,//функция
                error: function () { alert("ошибка загрузки"); },
                // shows the loader element before sending.
                beforeSend: function () { alert("before"); },
                // hides the loader after completion of request, whether successfull or failor.             
                complete: function () { alert("after"); },
                type: 'POST', dataType: 'json'//'html'
            });

#TODO взять из диплома go_ajax функцию




//проверенный post



объявление объекта для отправки
var dt = {
        'id': id
    };
//можно так
 var dt = {
            'forms[0].ActionId': 10,
            'forms[1].ActionId':20,
'forms1.ActionId'
        };




    $.ajax({
        url: "/SocialNetwork/SendComment",
        data: dt,
        success: function (data) {
            ShowCommentsRecord(id, false)
        },
        error: function () {
            alert("ошибка загрузки");
            PreloaderAction(false);

        },
        beforeSend: function () { PreloaderAction(true); },
        complete: function () {
            PreloaderAction(false);

        },
        type: 'POST', dataType: 'json'//html
    });






из js отправить #get запрос
$('#results').load('@Url.Action("BookSearch", "Home")?name='+name)



$.ajax({
  url: url,
  data: data,
  success: onAjaxSuccess,
  dataType: dataType
});
function onAjaxSuccess(data)
{
  // Здесь мы получаем данные, отправленные сервером и выводим их на экран.
  alert(data);
}









@using (Ajax.BeginForm("BookSearch", new AjaxOptions
{
    UpdateTargetId = "results",
    OnBegin = "OnBegin",
    OnFailure = "OnFailure",
    OnSuccess = "OnSuccess",
    OnComplete = "OnComplete"
}))
{
    <input type="submit" value="Поиск" />
}



Confirm="Выполнить AJAX-запрос?" - настраивает сообщение о подтверждении отправки запроса на сервер. Если пользователь не подтвердит, то запрос не будет отправлен

HttpMethod - устанавливает метод (Get или Post), с помощью которого выполняется запрос

InsertionMode - устанавливает, как полученные результаты будут отображаться на странице. Может принимать одно из трех значений перечисления InsertionMode: InsertAfter, InsertBefore и Replace(по умолчанию).

LoadingElementId="loading"- устанавливает id элемента html-страницы, который будет отображаться во время запроса. Обычно это какая-нибудь анимация, которая дает знать, что некоторая работа выполняется в фоновом режиме

LoadingElementDuration=1000 - устанавливает количество миллисекунд, через которое появится элемент, указанный в параметре LoadingElementId

OnBegin - задает обратный вызов перед отправкой запроса. Соотносится с событием beforeSend библиотеки jQuery 
function OnBegin() {



OnComplete - задает обратный вызов, который вызывается после выполнения запроса (как удачного, так и неудачного). Соотносится с событием complete библиотеки jQuery
function OnComplete(request, status) {


OnFailure - задает обратный вызов, который вызывается после неудачного выполнения запроса. Соотносится с событием error библиотеки jQuery
 function OnFailure(request, error) {


OnSuccess - задает обратный вызов, который вызывается после удачного выполнения запроса. Соотносится с событием success библиотеки jQuery
function OnSuccess(data) {



UpdateTargetId - указывает на id элемента, в котором будут выводиться результаты запроса

Url - устанавливает адрес Url сервера, на который отправляется запрос. Установив данное свойство, можно не использовать название имя контроллера и его действие в качестве параметров Ajax.BeginForm














#TODO
фильтры и не только это не обрабатывал и многое не понял  https://metanit.com/sharp/mvc5/8.1.php          -https://metanit.com/sharp/mvc5/8.9.php



возможно получение параметров в методе https://metanit.com/sharp/mvc5/9.5.php


поставщик значений
	https://metanit.com/sharp/mvc5/9.4.php



!!!!!!!!!!!! https://metanit.com/sharp/mvc5/7.1.php    указывать тип для редактирования







#атрибуты для #отображение #редактирование #attr #atribute

[...]
 public int Id { get; set; }

[HiddenInput (DisplayValue=false)] --- создаст hidden

 [Display(Name = "Название")]   корректно отображается через editorformodel() и LabelFor(=>)
[ScaffoldColumn(false)] --полностью скроет, не будет создано ничего
//editorfor
[DataType(DataType.Password)] --редактирем отображение

DataType.{
Currency --Отображает текст в виде валюты

DateTime--Отображает дату и время
Date--Отображает только дату, без времени
Time--Отображает только время
Text--Отображает однострочный текст
MultilineText--Отображает многострочный текст (элемент textarea)
Password--Отображает символы с использованием маски
Url--Отображает строку URL
EmailAddress-Отображает электронный адрес
}









#attr
#json атрибуты #JsonProperty
 [JsonProperty("startX")] -- меняет имя для формата json


 [UIHint("Url")]
 [UIHint("")]{
Boolean--Хелперы редактирования создают флажок (checkbox) для булевых значений. Для значений типа bool? (nullable) создается элемент select с параметрами True, False и Not Set
Хелперы отображения генерируют те же элементы html, что и хелперы редактирования, только с атрибутом disabled

Collection--Используется соответствующий шаблон для рендеринга каждого элемента коллекции. Причем элементы могут быть разных типов.

Decimal--Хелперы редактирования создают однострочное текстовое поле - элемент input

EmailAddress--Хелперы редактирования создают однострочное текстовое поле.
Хелперы отображения генерируют элемент ссылка, где атрибут href имеет значение mailto:url

HiddenInput--Создается скрытое поле - элемент hidden input

Html--Хелперы редактирования создают однострочное текстовое поле.
Хелперы отображения просто показывают текст

MultilineText--Хелперы редактирования создают многострочное текстовое поле (элемент textarea)

Object--Хелперы изучают свойства объекта и выбирают наиболее подходящие для него шаблоны.

Password--Хелперы редактирования создают текстовое поле для ввода символов с использованием маски
Хелперы отображения показывают пароль как есть, без использования маски

String--Хелперы редактирования создают однострочное текстовое поле

Url--Хелперы редактирования создают текстовое поле
Хелперы отображения создают элемент ссылки для данного Url

}

@Html.EditorForModel()
<input type="hidden" id="Id" name="Id" value="1" />



https://metanit.com/sharp/mvc5/7.1.php

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


#куки #сессия #сессии #session #Cookies
получить
string id =HttpContext.Request.Cookies["id"].Value;
установить
HttpContext.Response.Cookies["id"].Value = "ca-4353w";

удалить(устанавливаем вчерашнюю дату)
Response.Cookies[«MyCookieName»].Expires = DateTime.Now.AddDays(-1);

проверяем поддержки 
if (Request.Browser.Cookies)
{// поддерживает}
else
{// не поддерживает}
проверка отключения
Если пользователь отключил использование кукисов в броузере, то выше указанный метод Request.Browser.Cookies при проверки всё равно вернет true, но кукисы не будут сохранены на компютере клиета. Один из способов проверки в данном случаи является попытка сохранить кукис на первой странице, а затем используя Response.Redirect перенаправить на другую страницу и прочитать записанный кукис.


сессия
https://professorweb.ru/my/ASP_NET/base/level5/5_4.php
сессия держится 20 минут
Session["name"] = "Tom";
var val = Session["name"];
удалить
Session["name"]=null;
полностью закрываем сессию
Session.Abandon()


HttpSessionState методы
Count	Количество элементов в коллекции текущего сеанса
IsCookieless	Указывает, как отслеживается этот сеанс: с помощью cookie-набора или с использованием измененных URL-адресов
IsNewSession	Указывает, был ли данный сеанс только что создан для текущего запроса. Если в состоянии сеанса на текущий момент не содержится никакой информации, ASP.NET не будет беспокоиться ни об отслеживании сеанса, ни о создании cookie-набора сеанса. Вместо этого сеанс будет воссоздаваться заново при каждом запросе
Mode	Предоставляет перечислимое значение, которое объясняет, как ASP.NET хранит информацию о состоянии сеанса. Этот режим хранения определяется на основе указанных в файле web.config конфигурационных настроек
SessionID	Предоставляет строку с уникальным идентификатором сеанса для текущего клиента
StaticObjects	Предоставляет коллекцию элементов сеанса, предназначенных только для чтения, которые были объявлены в global.asax с помощью дескрипторов <object runat="server">. В основном эта технология не используется и является пережитком ASP-программирования; она поддерживается для обратной совместимости
Timeout	Текущее количество минут, которое должно пройти, прежде чем текущий сеанс будет завершен при условии отсутствия запросов от клиента. Это значение может изменяться программно, что дает возможность при необходимости продлевать срок жизни коллекции сеанса для более важных операций
Abandon()	Немедленно завершает текущий сеанс и освобождает все занятые им ресурсы памяти. Такая технология полезна на автономных страницах, поскольку позволяет освобождать ресурсы памяти сервера настолько быстро, насколько возможно
Clear()	Удаляет все элементы сеанса, но не изменяет идентификатор текущего сеанса





#area https://metanit.com/sharp/mvc5/6.5.php

classnameViewModel  для передачи в представление
переопределение шаблона отображения и редактирования EditorForModel @for @editor @display  https://metanit.com/sharp/mvc5/5.15.php
создание нового шаблона https://metanit.com/sharp/mvc5/5.14.php









#создание #html блоков c#

Свойство InnerHtml позволяет установить или получить содержимое тега в виде строки

Метод MergeAttribute (string, string, bool) позволяет добавить к элементу один атрибут. Для получения всех атрибутов можно использовать коллекцию Attributes

Метод SetInnerText(string) устанавливает текстовое содержимое внутри элемента

Метод AddCssClass(string) добавляет класс css к элементу

TagBuilder ul = new TagBuilder("ul");
TagBuilder li = new TagBuilder("li");
                li.SetInnerText(item);
                ul.InnerHtml += li.ToString();

return new MvcHtmlString(ul.ToString());





хелперы #helpers #healpers #razor
	стандартные 
@using (Html.BeginForm("Action", "Home",
    new { id = "MyIdValue" },
    FormMethod.Post,
    new { @class = "userCssClass", data_formType="user" })){
<input type="submit" value="Отправить" />
}

<form id="MyIdValue" class="userCssClass" method="post" action="/Home/Action" data-formType="user" method="post">
    
</form>




@Html.TextArea("text", "привет <br /> мир", 5, 50, null) <textarea cols="50" id="text" name="text" rows="5">привет <br /> мир</textarea>

@Html.TextBox(string name, string value, object htmlAttributes)

@Html.Hidden("BookId", "2") <input id="BookId" name="BookId" type="hidden" value="2" />

@Html.Password("UserPassword", "val") <input id="UserPassword" name="UserPassword" type="password" value="val" />

@Html.RadioButton 
Для создания группы переключателей, надо присвоить всем им одно и то же свойство name
@Html.RadioButton("color", "red") <input id="color" name="color" type="radio" value="red" />

@Html.CheckBox("Enable", false)
<input id="Enable" name="Enable" type="checkbox" value="true" />
<input name="Enable" type="hidden" value="false" />

@Html.Label("Name")<label for="Name">Name</label>

@Html.DropDownList("countires", new SelectList(new string[] {"Russia","USA", "Canada","France"}),"Countries")
SelectListItem имеет свойства Text (отображаемый текст), Value (само значение, которое может не совпадать с текстом) и Selected

<select id="countires" name="countires"><option value="">Countries</option>
<option>Russia</option></select>

@Html.ListBox("countires", new MultiSelectList(new string[] {"Россия","США", "Китай","Индия"}))
<select Length="9" id="countries" multiple="multiple" name="countires">
<option>Россия</option></select>

Display/DisplayFor Создает элемент разметки для отображения значения указанного свойства модели: Html.Display("Name")

Editor/EditorFor Создает элемент разметки для редактирования указанного свойства модели: Html.Editor("Name")

DisplayText/DisplayTextFor Создает выражение для указанного свойства модели в виде простой строки: Html.DisplayText("Name")

DisplayForModel/EditorForModel Создает поля для чтения для всех свойств модели: Html.DisplayForModel()













подключение файлов
@Scripts.Render("~/scripts/jquery.validate.min.js")
<script src="@Url.Content("~/scripts/jquery.validate.min.js")" type="text/javascript"></script>


явная #привязка #bind #params
public ActionResult Edit()
{
    var book = new Book();
    try
    {
        #UpdateModel(book);// #TryUpdateModel тоже самое но без исключений и возвращает bool

Выборочная привязка
можно применять к свойству модели и к самой модели
	привязываются только указанные свойства
	public ActionResult Create([Bind (Include="Name, Author")] Book b)
	([Bind (Exclude="Year")] Book b)  исключает из привязки







#ActionResult
наследники
System.Web.Mvc.#ContentResult
System.Web.Mvc.#EmptyResult  #пустой #ответ
System.Web.Mvc.#FileResult
System.Web.Mvc.#HttpStatusCodeResult
System.Web.Mvc.#JavaScriptResult
System.Web.Mvc.#JsonResult
System.Web.Mvc.#RedirectResult
System.Web.Mvc.#RedirectToRouteResult
System.Web.Mvc.#ViewResultBase

return new EmptyResult();







#Response #Cookies #куки

HttpCookie MyCookie = new HttpCookie("LastVisit");
DateTime now = DateTime.Now;
MyCookie.Value = now.ToString();
MyCookie.Expires = now.AddHours(1);
Response.Cookies.Add(MyCookie);



получить параметры  #params #get #post
#request
	при post 
	b.Name = Request.Form["Name"];
HttpContext.Request.Params.Get("param.1");
this.Request.QueryString["param.1"];
Request.Form. В данном случае привязчик получает значения, отправленные с помощью форм
RouteData.Values. Здесь получает значения с помощью маршрутов приложения
Request.QueryString. В данном случае привязчик извлекает значения из строки запроса
Request.Files. В данном случае используются загруженные на сервер файлы
Request.Cookies		Cookie-наборы, отправленные браузером с этим запросом
Request.HttpMethod		Метод HTTP (команда наподобие GET или POST), используемый для этого запроса
Request.Headers		Полный набор заголовков HTTP, отправленных с этим запросом
Request.Url		Элемент RouteTable.Routes, выбранный для этого запроса
Request.UserHostAddress		IP-адрес пользователя, сделавшего этот запрос
RouteData.Route		Элемент Routetable.Routes, выбранный для этого запроса
RouteData.Values		Активные параметры маршрута (либо извлеченные из URL, либо стандартные значения)
HttpContext.Application		Хранилище состояния приложения
HttpContext.Cache		Хранилище кеша приложения
HttpContext.Items		Хранилище состояния для текущего запроса
HttpContext.Session		Хранилище состояния для сеанса посетителя
User		Аутентификационная информация о вошедшем пользователе
TempData		Временные элементы данных, сохраненные для текущего пользователя
(string)RouteData.Values["city"]





#валидация    #attr #validate
   https://metanit.com/sharp/mvc5/7.1.php
атрибуты для полей для валидации 
System.ComponentModel.DataAnnotations 
(ErrorMessage ="Идентификатор пользователя не установлен")--может быть у всех атрибутов
  [Required]-- (свойство обязательно должно быть задано)
[Required(ErrorMessage = "Поле должно быть установлено")]--с сообщением
[RegularExpression (@"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}", ErrorMessage = "Некорректный адрес")]-- проверка регулярками
[StringLength(50, MinimumLength = 3, ErrorMessage = "Длина строки должна быть от 3 до 50 символов")]-- ограничение длины строки
[Range(typeof(decimal), "0.00", "49.99")]   [Range(1700,2000,ErrorMessage="Недопустимый год")]
//
оба свойства должны иметь одинаковое значение
[DataType(DataType.Password)]
public string Password { get; set; }
 
[Compare("Password",ErrorMessage="Пароли не совпадают")]
[DataType(DataType.Password)]
public  string PasswordConfirm { get; set; }//#Password

//#валидация для проверки на #сервере
//перед свойством
[System.Web.Mvc.Remote("CheckExistingEmail", "Account", HttpMethod = "POST", ErrorMessage = "Email already exists")]
    
//
 // не нужно? [Remote("CheckName", "Home", ErrorMessage = "Name is not valid.")]
//return false если проверка не пройдена и true если норм
//[HttpGet]
public JsonResult CheckName(string name)
{
    var result = !(name=="Название");
    return Json(result, JsonRequestBehavior.AllowGet);
}
//

User user = new User { Name = name, Age = age };//создание объекта для которого настроена валидация атрибутами
//массив в котором будут ошибки
var results = new List<ValidationResult>();
//контекст валидации
            var context = new ValidationContext(user);
//bool -надо ли валидировать все свойства
            if (!Validator.TryValidateObject(user, context, results, true))
            {
                foreach (var error in results)
                {
                    Console.WriteLine(error.ErrorMessage);
                }
            }




 @Html.EditorFor(model => model.Name)
    @Html.ValidationMessageFor(model => model.Name)
валидация на сервере
public ActionResult Create([Bind(Include="Id,Name,Author,Year")] Book book){
if (ModelState.IsValid){//#IsValid
//#ModelState хранит все принятые свойства и флаг ошибки для каждого


ModelState.AddModelError("Name", "Некорректное название книги"); ---добавить "ошибку валидации" при "Name"=="" это ошибка уровня модели

//по ссылке все примеры и css
https://metanit.com/sharp/mvc5/7.2.php



создание своих атрибутов для валидации

//суффикс Attribute
//применять без суффикса [UserName]
public class UserNameAttribute : ValidationAttribute
{
    public override bool IsValid(object value)
    {
        if (value != null)
        {
//или к любому типу, если атрибут для всей модели а не для свойства то просто к объекту приводить
            string userName = value.ToString();
//если к моделе то можно так
this.ErrorMessage = "сообщение об ошибке";
        }
//false проверка не пройдена true-пройдена
        return false;
    }
}


Самовалидация модели

 public class User : #IValidatableObject
    {
public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            List<ValidationResult> errors = new List<ValidationResult>();
 
            if (string.IsNullOrWhiteSpace(this.Name))
                errors.Add(new ValidationResult("Не указано имя"));
return errors;
        }}











#маршрутизация #routing
routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
игнорирование routes.IgnoreRoute("Home/Index/12");
 
       routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
            );
много параметров routes.MapRoute(name: "Default", url: "{controller}/{action}/{id}/{*catchall}",defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional});


#получить #параметры при том что выше , и тд
 string controller = RouteData.Values["controller"].ToString();
 string catchall = RouteData.Values["catchall"].ToString();//вернет все параметры

ограничения для маршрутов
routes.MapRoute(name: "",url: "",defaults: new { },
        constraints: new {controller="^H.*" , id = @"\d{2}" }//регулярки
);



routing через атрибуты https://metanit.com/sharp/mvc5/6.7.php





 



@RenderSection("Footer", false)   #рендер необязательной #секция #RenderSection #IsSectionDefined

рендер необязательной секции с кодом по умолчанию
 @if (IsSectionDefined("Footer")) {
        @RenderSection("Footer")
    }
    else 
    { 
        <span>Содержание элемента footer по умолчанию.</span>   
    }

определение секции в view 
@section Footer {
    Все права защищены. Syte Corp. 2012.
}





	создание #healper хелпера в файле представления
@helper BookList(IEnumerable<BookStore.Models.Book> books)
{}
@BookList(ViewBag.Books)


	#создание #healper #хелпера в отдельном файле #helper
создать в проекте папку под названием App_Code(именно такое)
создать представление в ней MyHelpers.cshtml
@helper HtmlList(string[] items)
{<div></div>}
@MyHelpers.HtmlList(new string[] { "Лондон", "Париж", "Берлин" })

	создание healper хелпера в отдельном файле на c#
создадать в проекте новую папку Helpers и добавим в нее новый класс ListHelper

namespace BookStore.Helpers
{
    public static class ListHelper
    {
        public static MvcHtmlString CreateList(this HtmlHelper html, string[] items, object htmlAttributes = null)
        {
            TagBuilder ul = new TagBuilder("ul");
            ul.MergeAttributes(HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
            return new MvcHtmlString(ul.ToString());
        }
    }
}
@using BookStore.Helpers
@Html.CreateList(cities, new { @class = "btn", id = "citiesList" })






Передача данных из контроллера в представление
#ViewData["

 ViewData["Head"] = "Привет мир!";
<h2>@ViewData["Head"]</h2>

#ViewBag

ViewBag.Head = "Привет мир!";
 <h2>@ViewBag.Head</h2>

#ViewData
при data известен тип 

@Html.TextBox("name", ViewData["Name"])
@Html.TextBox("name", (string)ViewBag.Name)

#TempData
хранится до момента прочтения, применение как у data






#redirect #TODO мбдублируется
так нельзя передавать сложные типы данных!!!! можно закинуть в TempData
return #RedirectToAction("ListFeText", "Physic", new { listId = list_id });
return #RedirectToRoute(new { controller = "Physic", action = "ListFeText", listId = list_id });

return Redirect("/Home/Index");//временная
 return RedirectPermanent("/Home/Index");//пермач
























































