

https://www.c-sharpcorner.com/article/create-poco-class-library-using-reverse-engineer/
generate poco classes from database mssql



есть еще какой то экстеншн
entityFramework Reverse POCO Generator



#poco #c# #class #generate #генерация #db #ef #efcore
в скрипте указать название таблицы, это не официальный скрипт, не генерит вообще любые свойства, мб надо дописать или поискать что то еще

https://gist.github.com/joey-qc/6710702



declare @tableName varchar(200)
declare @columnName varchar(200)
declare @nullable varchar(50)
declare @datatype varchar(50)
declare @maxlen int
declare @pos int

declare @Stype varchar(50)
declare @sProperty varchar(200)

DECLARE table_cursor CURSOR FOR
SELECT TABLE_NAME
FROM [INFORMATION_SCHEMA].[TABLES]
WHERE TABLE_NAME = 'WorkOrderCategory'

OPEN table_cursor

FETCH NEXT FROM table_cursor
INTO @tableName

WHILE @@FETCH_STATUS = 0
BEGIN

PRINT 'public class ' + @tableName + ' {'

DECLARE column_cursor CURSOR FOR 
SELECT COLUMN_NAME, IS_NULLABLE, DATA_TYPE, isnull(CHARACTER_MAXIMUM_LENGTH,'-1'), ORDINAL_POSITION 
from [INFORMATION_SCHEMA].[COLUMNS] 
WHERE [TABLE_NAME] = @tableName
order by [ORDINAL_POSITION]

OPEN column_cursor
FETCH NEXT FROM column_cursor INTO @columnName, @nullable, @datatype, @maxlen, @pos

WHILE @@FETCH_STATUS = 0
BEGIN

-- datatype
select @sType = case @datatype
when 'int' then 'int'
when 'decimal' then 'Decimal'
when 'money' then 'Decimal'
when 'char' then 'string'
when 'nchar' then 'string'
when 'smallint' then 'short'
when 'varchar' then 'string'
when 'nvarchar' then 'string'
when 'uniqueidentifier' then 'Guid'
when 'datetime' then 'DateTime'
when 'bit' then 'bool'
else 'string'
END

	If (@pos = 1)
		PRINT '	[Key]'
	If (@nullable = 'NO')
		PRINT '	[Required]'
	if (@sType = 'string' and @maxLen <> '-1')
		Print '	[MaxLength(' +  convert(varchar(4),@maxLen) + ')]'
	SELECT @sProperty = '	public ' + @sType + ' ' + @columnName + ' { get; set; }'
	PRINT @sProperty

	--print ''
	FETCH NEXT FROM column_cursor INTO @columnName, @nullable, @datatype, @maxlen, @pos
END
CLOSE column_cursor
DEALLOCATE column_cursor

print '}'
print ''
FETCH NEXT FROM table_cursor 
INTO @tableName
END
CLOSE table_cursor
DEALLOCATE table_cursor













