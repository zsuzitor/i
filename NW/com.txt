

nuget->ClosedXML
namespace OfficeOpenXml
лучше использовать только для записи, если из байтов или сохраненного файла может не работать

public byte[] Convert(List<Orders> listForConvert)
        {
            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.Worksheets.Add("Orders");
                int position = 1;
                foreach (var obj in listForConvert)
                {
                    Convert(obj,worksheet, position++);
                }

                using (MemoryStream stream = new MemoryStream())
                {
                    workbook.SaveAs(stream);
                    stream.Seek(0, SeekOrigin.Begin);
                    return stream.ToArray();
                }
                
            }
        }
private void Convert(Orders objforConvert, IXLWorksheet worksheet,int position)
        {
            worksheet.Cell($"A{position}").Value = objforConvert.OrderID;
            worksheet.Cell($"B{position}").Value = objforConvert.CustomerID;
}









nuget->EPPlus


public List<Orders> Convert(Stream stream)
        {
            if (!stream.CanRead)
                return null;
            if (stream.CanSeek)
                stream.Position = 0;

            var resList = new List<Orders>();
            ExcelPackage package = new ExcelPackage(stream);
            var ws = package.Workbook.Worksheets["Orders"];
            for (int i = 1;; i++)
            {
                var order = Convert(ws, i);
                if (order == null || order.OrderID == 0)
                    break;
                resList.Add(order);
            }

            return resList;
        }

private Orders Convert(ExcelWorksheet worksheet, int position)
        {
            var orderRes = new Orders();

            Dictionary<string, string> data = new Dictionary<string, string>();

            data["OrderID"] = worksheet.Cells[$"A{position}"].Value?.ToString();
            data["CustomerID"] = worksheet.Cells[$"B{position}"].Value?.ToString();
}
















#com 

#exel

var арр = new Application { Visible = false };
Workbook workbook = app.Workbooks.Add();
Worksheet worksheet = app.ActiveSheet;
int row = 1;
foreach (var product in Products)
{
worksheet.Cells[row, 1].Value = product.Name;
worksheet.Cells[row, 2].Value = product.Price;
row++;
}
workbook.SaveAs(Filename: "demo.xls",
FileFormat: XlFileFormat.xlWorkbookNormal);
app.Application.Quit();


#Ексель 
using  Microsoft.Office.Interop.Excel

var арр = new Application { Visible = true };//Открыть Excel с активным рабочим листом
арр.Workbooks.Add();
Worksheet worksheet = (Worksheet) app.ActiveSheet;
//Создать диапазон можно было бы и с помощью единственного вызова метода Range["А1:Т1]
Range start = (Range) worksheet.Cells[1, 1];//Определить начальную и конечную ячейки
Range end = (Range) worksheet.Cells[1, 20];//Определить начальную и конечную ячейки
worksheet.Range[start, end].Value = Enumerable.Range(1, 20).ToArray();//Заполнить диапазон значений [1, 20]
 








#doc #word


Application арр = new Application { Visible = true };
app.Documents.Add();
Document doc = app.ActiveDocument;
Paragraph para = doc.Paragraphs.Add();
para.Range.Text = "Thank goodness for C# 4";
doc.SaveAs(FileName: "test.doc",
FileFormat: WdSaveFormat.wdFormatDocument97);
doc.Close();
app.Application.Quit();












