$ git init  создание репозитория
git remote add origin https://github.com/zsuzitor/4elleng.git           настройка куда заливать
git push -u origin master          =залить мудл куда настроено
git add .                 добавить все файлы
$ git commit -m "12vetv"            создать коммит
git checkout master                    перемещение на ветвь
git checkout -b iss53                  содание и переход на ветвь
git merge iss53                 слить то где сейчас с iss53
$ git log           инфа о ветках и тд
git status         инфа о то что добавлено вроде
git branch            список веток
git branch -v           последний коммит на каждой из веток
git branch -d iss53 удалить ветку
git diff ветка сравнить чем отличаются по строкам


при начале работы
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

узнать логин
git config user.name


откатиться к последнему коммиту
git stash
git stash drop





#conflicts #rebase
перейти в свою ветку
git rebase develop
пофиксить конфликты
все файлы которые не в stage перенести в него
git rebase --continue
git push --force



#module #submodule
git submodule
https://git-scm.com/book/ru/v1/Инструменты-Git-Подмодули

работает
там где .git основного проекта
git submodule update --init

хз что это и как, мб не работает
1 склонировать проект
2 git submodule init
3 git submodule update
https://stackoverflow.com/questions/5828324/update-git-submodule-to-latest-commit-on-origin





при разделении веток синий текст и ни на что нет реакции:
press: i(или 1)
Write your merge message

Press @Esc@

Write ":wq"

Then press @Enter@



решение конфликтов при пуле:
то что после head это данные с текущей ветки
то что после названия ветки это данные с той ветки которую пулим
при возникновении кофликта надо не закрывая гит(там будет текущая ветка отображена "название_ветки|mergin"
открыть конфликтные файлы и изменить их так что бы получился тот который нужен в итоге
изменения сохранить, закомитить и запушить






1. Копируете себе локально репозиторий.
git clone url [folder]
cd [folder]
2. Создаете ветку [branch_name]
git checkout -b [branch_name]
3. Делайте изменения 
4. Делаете один коммит или несколько.
git add . (если создавали новые файлы)
git commit -am "Added beautiful fixes"
5. Создаете удаленную ветку.
git push --set-upstream origin [branch_name]
В дальнейшем когда удаленная ветка создана то просто 
git push
6. Создаете в интерфейсе github pull-request. Из вашей ветки в master.











https://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%A3%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%82%D0%BA%D0%B0%D0%BC%D0%B8


Самый основной метод:
1. Форкаете репозиторий github.com/user1/project, получаете github.com/you/project
2. Уже форкнутый репозиторий сливаете себе на комп:
git clone git@github.com:/you/project project
3. Создаёте отсылку на «родительский» репозитарий, например как на upstream
git remote add git@github.com:/user1/project upstream, чтобы потом сливать изменения с «родителя» себе git pull upstream master
4. Создаёте новую ветку
git checkout -b feature
5. Работаете, делаете коммиты, в случае необходимости отслеживания изменений в «родителе», сливаете изменения с него и вливаете в свою ветку таким образом:
git checkout master
git pull upstream master
git checkout feature
git merge master
6. Когда работу сделали, заливаете изменения в свой github-репозиторий в свою ветку:
git push origin feature
7. Теперь идёте на гитхаб, в свой репозиторий и жмёте вверху кнопочку «Pull request»
8. Слева выбираете в какую ветку будут вливаться изменения в родительском репозитории, справа — какие изменения будут браться с вашего репозитория. По примеру: справа project/master, слева project/feature.
ВЫЖНО: Договоритесь с владельцем «родительского» репозитория, в какую ветку будете вливать изменения (он может написать это в README)
9. Заполняете название и описание (название потом попадёт в описание мёрдж-коммита и станет достоянием общественности, учтите это).
10. Нажимаете Send Pull Request

Вуаля, вы его отправили. Владелец рассмотрит ваши изменения и, возможно, их примет и вольёт к себе.
На практике, лучше перед посылкой пулл-реквестов, вручную синхронизироваться с веткой, в которую будете посылать изменения, чтобы у владельца merge прошёл гладко (больше шансов, что пулл примут ;-) )
Не забудьте потом сделать git pull upstream master, чтобы увидеть изменения у себя.