

#PHP


<?php  ?>

переменные в массиве создаются при обращении к ним , не обязательно при присваивании
$b = array();
foo($b['b']);
array_key_exists('b', $b)//true




включаем строгую типизацию в файле
Строгая типизация применима только к скалярным типам и работает только в PHP 7.0.0 и выше. Равно как и сами объявления скалярных типов добавлены в этой версии.
declare(strict_types=1);


для доступа к объекту мы не ссылку используем как перменную, а в переменной хранится id и по нему получаем доступ
 $a = new A;
$b = $a; //копируется id
$d = &$a;// ссылаемся на id



оббъявление глобальной переменной
global $color;

отправить ответ в формате json
echo json_encode("This string will encode to JSON format");

var_dump Выводит информацию о переменной

method_exists($obg,string method_name);

$a = array(1, 2, array("a", "b", "c"));
var_dump($a);
 array(
    key  => value,
}

PHP_EOL перевод строки


// #перенаправление на скрипт index.php #redirect
//тут надо полностью прописывать адрес, а не так как тут, в мануале написано как именно
    header('Location: index.php');


bool isset($perem) — Определяет, была ли установлена переменная значением, отличным от NULL
unset($a); --уничтожаем переменную

 ?? как в шарпе
$foo ?? $bar ?? $baz ?? $qux; 


get_class — Возвращает имя класса(string), к которому принадлежит объект 

получить ключи объекта
key(obg)




NULL
if($a)
    echo "Переменная a определена и при приведении к bool стала true";
else
    echo "Переменная a не определена или при приведении к bool стала false";


кавычки как в js + \ для использования как символа
одинарные кавычки выводят текст как он есть(нельзя использовать $ для доступа к переменной)


#Константы #const
Если константа $name определена, то функция будет возвращать значение true
bool defined(string $name)

Функция constant() полезна, если вам необходимо получить значение константы, но неизвестно её имя. Например, если оно хранится в переменной или возвращается функцией.
$pricePerItem = constant(__CLASS__ . "::PRICE_" .strtoupper($product));

создание константы
define("NUMBER", 22);
echo NUMBER;
используются такие константы , как и те что ниже просто как переменные

_POST["a"] - запрос формы
_GET["a"] - get запрос
__FILE__: хранит полный путь и имя текущего файла

__LINE__: хранит текущий номер строки, которую обрабатывает интерпретатор

__DIR__: хранит каталог текущего файла

__FUNCTION__: название обрабатываемой функции

__CLASS__: название текущего класса

__METHOD__: название обрабатываемого метода

__NAMESPACE__: название текущего пространства имен



тип переменной
is_integer($a): возвращает значение TRUE, если переменная $a хранит целое число
is_string($a): возвращает значение TRUE, если переменная $a хранит строку
is_double($a): возвращает значение TRUE, если переменная $a хранит действительное число
is_numeric($a): возвращает значение TRUE, если переменная $a представляет целое или действительное число или является строковым представлением числа. Например:
is_bool($a): возвращает значение TRUE, если переменная $a хранит значение TRUE или FALSE
is_scalar($a): возвращает значение TRUE, если переменная $a представляет один из простых типов: строку, целое число, действительное число, логическое значение.
is_null($a): возвращает значение TRUE, если переменная $a хранит значение NULL
is_nan()
is_array($a): возвращает значение TRUE, если переменная $a является массивом
is_object($a): возвращает значение TRUE, если переменная $a содержит ссылку на объект
gettype($a): возвращает тип переменной $a, например, integer (целое число), double (действительное число), string (строка), boolean (логическое значение), NULL, array (массив), object (объект) или unknown type.


установить тип переменной
params 1-переменная 2-строка с типом(результат gettype())
settype()
$a = 10.7;
settype($a, "integer");
echo $a; // 10


if(NULL) --- false
 

#static статические переменные
если в функции то 1 на все функции(доступ к ней из функции просто как к переменной)
function getCounter()
{
    static $counter = 0;
}


global
определение глобальной переменой
можно обратиться из любой части программы
global $gvar;



array_walk()
Применяет заданную пользователем функцию к каждому элементу массива
Обычно функция callback принимает два параметра. В качестве первого параметра идет значение элемента массива array, а ключ - в качестве второго.
Если требуется, чтобы функция callback изменила значения в массиве, определите первый параметр callback как ссылку
Потенциально изменены могут быть только значения массива array; структура самого массива не может быть изменена, то есть нельзя добавить, удалить или поменять порядок элементов.

$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");

function test_alter(&$item1, $key, $prefix)
{
    $item1 = "$prefix: $item1";
}

array_walk($fruits, 'test_alter', 'fruit');
//можно вместо 2 параметра, use-это захват переменных в функцию
$callback =
            function ($quantity, $product) use ($tax, &$total)
            {
};




объединение массива в строку с разделителем
$comma_separated = implode(",", $array);




сравнение строк
Возвращает отрицательное число, если str1 меньше str2, положительное число, если str1 больше str2, и 0, если строки равны.
с учетом регистра
strcmp($var1, $var2) !== 0
первые n символы
int strncmp ( string $str1 , string $str2 , int $len )
strcasecmp — Бинарно-безопасное сравнение строк без учета регистра

#class

class A
{
    function foo()
    {
}


// если относится к классу то класс нельзя наследовать, если к методу то метод нельзя переопределять(но он наследуется) в классе наследнике
final function getInfo()//запрещаем наследование
    {
}
}


$a = new A();
//вызов не статичный
//поля также
//статику так нельзя
$a->foo();
//вызов статичный, также можно и не статичный метод вызвать при вызове через parent и тд
A::foo();
переменная A::$foo1;

//создание объекта без параметров
$instance = new SimpleClass();
$instance = new SimpleClass;

// Это же можно сделать с помощью переменной:
$className = 'SimpleClass';
$instance = new $className(); // new SimpleClass()



== свойства объектов просто сравниваются друг с другом, а именно: два объекта равны, если они имеют одинаковые атрибуты и значения (значения сравниваются через ==) и являются экземплярами одного и того же класса.
=== переменные, содержащие объекты, считаются идентичными только тогда, когда они ссылаются на один и тот же экземпляр одного и того же класса







#анонимный
при создании такого объекта анонимного класса, у него нет доступа к переменным класса в которым он осздан(кроме паблик), и их надо передавать в конструкторе
//для protected можно унаследовать анонимный от того в котором создается
//10 сразу вызываем конструктор
$obj=new class(10) extends SomeClass implements SomeInterface {
    private $num;

    public function __construct($num)
    {
        $this->num = $num;
    }

    use SomeTrait;
};


если есть функция(например) которая возвращает объект анонимного класса, то она будет возаращать объекты 1 и того же класса get_class()==


#const #static
public const BAR = 'bar';
echo Foo::BAR
public static $my_static = 'foo';
return parent::$my_static;
$foo = new Foo();
print $foo::$my_static



наследование
class SubClass extends BaseClass {

при наследовании если не переопредлить метод то остается метод класса родителя


// также можно метод с именем класса но это устарело и юзать не надо
конструктор
function __construct() {
       print "Конструктор класса BaseClass\n";
   }

при наследовании если не определяем свой конструктор то он наследуется от базового
если определяем то надо вызвать


function __construct() {
       parent::__construct();
       print "Конструктор класса SubClass\n";
   }



деструктор
наследование как у конструктора, выброс исключений недопустим
function __destruct() {
       print "Уничтожается " . $this->name . "\n";
   }







#перегрузка

добавляем классу магические методы которые позволяют вызывать и обращаться с свойствам или методам которые не объявлены

class PropertyTest 
{
    /**  Место хранения перегружаемых данных.  */
    private $data = array();

    /**  public свойство, будет доступ как обычно методы прегрузки вызываться не будут */
    public $declared = 1;

    /** private  Здесь перегрузка будет использована только при доступе вне класса.  */
    private $hidden = 2;

    public function __set($name, $value) 
    {
        //устанавливаем в массиве
        $this->data[$name] = $value;
    }

    public function __get($name) 
    {
        //получаем из массиве
        if (array_key_exists($name, $this->data)) {
            return $this->data[$name];
        }

      //обработка ошибка
    }

    public function __isset($name) 
    {
        // "Установлено ли '$name'?\n";
        return isset($this->data[$name]);
    }

    
    public function __unset($name) 
    {
        // "Уничтожение '$name'\n";
        unset($this->data[$name]);
    }


//для методов

public function __call($name, $arguments) {
}

//для статического метода
public static function __callStatic($name, $arguments) {

}

}


isset($obj->properyNotContain);//нормально отработает если был установлен до этого
$obj->mthodNotContain();
PropertyTest::StaticMthodNotContain();




















функции
можно указать тип параметра для строгой типизации, если указать класс то как в шарпе, наследники тоже зайдут
можно казать тип интерфейса
public function baz(Test $other)
    {
}


//определяем тип возвращаемого значения
function sum($a, $b): float {
    return $a + $b;
}



// Без "use"
$example = function () {
    var_dump($message);
};
$example();

// Наследуем $message
//$arg -обычный аргумент , message- замыкание,var -замыкание по ссылке
$example = function ($arg) use ($message,&$ var) {
    var_dump($message);
};
$example(11);



$func = static function() {
 $func();




передача по ссылке
function add_some_extra(&$string)
по умолчанию
function makecoffee($type = "капучино")


//скорее всего неверно
//Объекты, которые имеют общий тип (наследуются от одного класса), имеют доступ к элементам с модификатором  protected друг друга, даже если не являются одним и тем же экземпляром. 
//в функции объекта класса можно вызвать прайват функцию другого объекта этого класса или если у них общий родитель





::
позволяющая обращаться к статическим свойствам, константам и переопределенным свойствам или методам класса

class MyClass {
    const CONST_VALUE = 'Значение константы';
}
classname-строка с именем
echo $classname::CONST_VALUE;
MyClass::


??????????????????
с этими словами :: вызываем
parent - вызываем родительский метод (не обязательно статичный????), self - вызываем метод именно этого класса, static - вызываем метод текущего класса. Разница между self и static хорошо видна, например, когда вы делаете new self() или new static() - в первом случае будет создан объект класса, где упомянут self (т.е. создан родитель), во втором - объект того класса, где вызывается метод (т.е. потомок)


в классе объявлена статическая переменная и в методе класса получаем доступ
self::$my_static
в родителе объявлена переменная, получаем к ней доступ
parent::CONST_VALUE






Абстрактные классы



При наследовании от абстрактного класса, все методы, помеченные абстрактными в родительском классе, должны быть определены в дочернем классе;
 кроме того, область видимости этих методов должна совпадать (или быть менее строгой). Например, если абстрактный метод объявлен как protected,
 то реализация этого метода должна быть protected или public, но не private. Более того, объявления методов должны совпадать, то есть контроль типов (type hint) 
и количество обязательных аргументов должно быть одинаковым. К примеру, если в дочернем классе указан необязательный параметр, которого нет в объявлении абстрактного класса, 
то в данном случае конфликта объявлений методов не будет. Это правило также применяется к конструкторам начиная с версии PHP 5.4, ранее объявления конструкторов могли отличаться.


abstract class AbstractClass
{
   /* Данный метод должен быть определён в дочернем классе */
    abstract protected function prefixValue($prefix);

   /* Общий метод */
    public function printOut() {
}
}



необязательный аргументы
public function prefixName($name, $separator = ".") {


работа со строками
"{$prefix}{$separator} {$name}"; =="{val1}{val2} {val3}"



// Объявим интерфейс 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}


class Template implements iTemplate
{


}



interface a
interface b extends a



interface a
{
    const b = 'Константа интерфейса';
}
// константы переопределять нельзя.
class b implements a
{
    const b = 'Константа класса';//ошибка
}









#callback
//вызов функции по названию
call_user_func('my_callback_function');
// Type 2: Вызов статического метода класса
call_user_func(array('MyClass', 'myCallbackMethod'));
// Type 3: Вызов метода класса
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));
//B наследник класса A и вызовется метод A, статический
call_user_func(array('B', 'parent::who')); // A

class C {
    public function __invoke($name) {
        echo 'Hello ', $name, "\n";
    }
}
$c = new C();
call_user_func($c, 'PHP!');





$double = function($a) {
    return $a * 2;
};

// Диапазон чисел
$numbers = range(1, 5);
//будет вызвана для каждого числа и вернет массив новых чисел
$new_numbers = array_map($double, $numbers);







#array #массив
$ar=array();
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
$phones = array('iPhone', 'Samsung Galaxy S III', 'Nokia N9', 'Sony XPeria Z3');

$phones[0] = "Nokia N9";
$phones[1] = "Samsung Galaxy ACE II";
//ассоциативный массив, для перебора только foreach
$phones["nokia"] = "Nokia N9";

/* Пример 4: многомерные массивы */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

#foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}
echo $phones["apple"][0];

if (array_key_exists($key, $array))

На каждой итерации значение текущего элемента присваивается переменной $value
foreach (array_expression as $value)
    statement


присвоит ключ текущего элемента переменной $key на каждой итерации+ то что 1
foreach (array_expression as $key => $value)
    statement




при сравнении == === сравнивается длина а потом поэлементно


для изменения в foreach
нужно &
foreach ($arr as &$value) {
    $value = $value * 2;
}
unset($value);//после цикла надо уничтожить, тк продолжит ссылаться



можно так
мы получим кдоступ ко всем ДОСТУПНЫМ свойствам
можно изменить реализовав в классе интерфейс Iterator или IteratorAggregate
$class = new MyClass();

foreach($class as $key => $value) {
    print "$key => $value\n";
}






альтернатива foreach
while (list($key, $value) = each($phones))
    echo "$key => $value <br />";


проверяет является ли переменная массивом
is_array($f)
количеств элементов в массиве
count/sizeof
перемешать элемнты случайным образом
shuffle($os);


compact 
создает из переменных массив с ключами которые соответствуют названиям переменных
$producer = "Apple";
$year = 1978;
$data = compact('model', 'producer', 'year');


сортировка массива
void func(mass);
сортировка по значениям
по алфавиту без регистра и только буквы, числа в порядке возрастания
asort($tablets);
//явно указываем
asort($tablets, SORT_STRING);
SORT_REGULAR: автоматический выбор сортировки
SORT_NUMERIC: числовая сортировка
SORT_STRING: сортировка по алфавиту

сортировка в обратном порядке
arsort($tablets);


сортировка по ключам

ksort($tablets, SORT_STRING);
обратный порядок
krsort($tablets);


сортировка смешанных данных(сортируем по строке в которой текст+ цифры)
естественная сортировка с учетом регистра
natsort($os);
без учета регистра
natcasesort($os);





#each 
проходит по всем элементам массива $phones и получает его в виде массива, в который входят ключ и значение элемента.
each($phones)





#__clone #clone

$a= clone $b;

function __clone()
    {
        //все поля копируются сами, если надо копировать ссылочный тип то делаем так,((((this указывает на новый объект, наврятли так но хз как это работает)))))
        $this->object1 = clone $this->object1;
    }



альтернатива
 (expr1) ? (expr2) : (expr3) 


<?php if ($a == 5): ?>
A равно 5
<?php endif; ?>

if ($a == 5):
    echo "a равно 5";
    echo "...";
elseif ($a == 6):
    echo "a равно 6";
    echo "!!!";
else:
    echo "a не равно ни 5 ни 6";
endif;


while ($i <= 10):
    echo $i;
    $i++;
endwhile;

endfor;




#безопасность  #защита
#htmlentities
js html код введенный будет просто текстом отображаться
 $login=htmlentities($_POST['login'],ENT_QUOTES, 'UTF-8');

для кирилицы
htmlentities("Кириллица", ENT_QUOTES, 'UTF-8')
полностью уберет html теги    <div>123</div>  -> 123
$password = strip_tags($_POST['password']);


#безопасность #sql
//безопасное получание данных(фиксит html, sql,js)
$name = htmlentities(mysqli_real_escape_string($link, $_POST['name']),ENT_QUOTES, 'UTF-8');



передача данныйх   получение данных
#$_GET #$_POST  #_GET #_POST

$_GET $_POST
$_REQUEST['username']; тоже что и _post

<input type="checkbox" name="remember" checked="checked" />
$remember = $_GET['remember'];
Если флажок находится в неотмеченном состоянии то при отправке формы значение данного флажка не передается на сервер.
Если флажок отмечен, то при отправке на сервер для поля remember будет передано значение on
Если нас не устраивает значение on, то с помощью атрибута value мы можем установить нужное нам значение:
Запомнить: <input type="checkbox" name="remember" value="1" />


для передачи группы checkbox name=[]

<input type="checkbox" name="technologies[]" value="ASP.NET" />
<input type="checkbox" name="technologies[]" value="PHP" />
принимается как массив того что отмечено
$technologies = $_POST['technologies'];
foreach($technologies as $item) echo "$item<br />";


На сервер передается значение атрибута value у выбранного переключателя
<input type="radio" name="course" value="ASP.NET" />ASP.NET <br>
<input type="radio" name="course" value="PHP" />PHP <br>



список
<select name="course" size="1">
    <option value="ASP.NET">ASP.NET</option>
    <option value="PHP">PHP</option>
</select>

при множественном выборе на сервере получаем массив
<select name="courses[]" size="4" multiple="multiple">
    <option value="ASP.NET">ASP.NET</option>







работа со #строками #string #строка #строки
включаем доп функции
 Но прежде чем начать работу со строками, откроем файл php.ini и найдем в нем следующую строку:
Раскомментируем ее, убрав точку с запятой.// И так как у нас файл php.ini изменился, перезапустим веб-сервер Apache.

;extension=mbstring



#strpos
возвращает позицию подстроки(первое #вхождение) или символа $search в строке $str или значение false, если строка $str не содержит подстроки 
$position = strpos($str, $search);
надо сравнивать результат через $position===false, тк может вернуть 0 а 0 == false

strpos может плохо работать с кирилицей, что бы все норм работало надо юзать #mb_strpos()


#strrpos()
возвращает позицию подстроки(последнее #вхождение)
#mb_strrpos() кирилица



#trim()
Функция trim($str) удаляет(возвращает новую строку) из строки начальные и конечные пробелы, а также управляющие символы '\n', '\r', '\t':


#регистр
#strtolower()
в нижний регистр, возвращает строку
#mb_strtolower кирилица

верхний регистр
#strtoupper()
#mb_ strtoupper()


#strlen()
#mb_strlen()
длина строки


#substr 
вроде работает без mb_
возвращает обрезанную версию
2- позиция первого символа
6- длина(необязательно)
$subinput2 = substr($input, 2, 6);











#cookie
#куки

bool setcookie(string $name, string $value, int $expire, 
    string $path, string $domain, bool $secure, bool $httponly);

name: имя cookie, которое будет использоваться для доступа к его значению
value: значение или содержимое cookie - любой алфавитно-цифровой текст не более 4 кБайт
expire (необязательный параметр): срок действия, после которого cookie уничтожаются. Если данный параметр не установлен или равен 0, то уничтожение cookie происходит после закрытия браузера.
path (необязательный параметр): путь к каталогу на сервере, для которого будут доступны cookie. Если задать '/', cookie будут доступны для всего сайта. Если задать, например, '/mydir/', cookie будут доступны только из каталога /mydir/' и всех его подкаталогов. По умолчанию значением является текущий каталог, в котором устанавливаются cookie.
domain (необязательный параметр): задает домен, для которого будут доступны cookie. Если это домен второго уровня, например, localhost.com, то cookie доступны для всего сайта localhost.com, в том числе и для его поддоменов типа blog.localhost.com.
Если задан поддомен blog.localhost.com, то cookie доступны только внутри этого поддомена.
secure (необязательный параметр): указывает на то, что значение cookie должно передаваться по протоколу HTTPS. Если задано true, cookie от клиента будет передано на сервер, только если установлено защищенное соединение. По умолчанию равно false.
httponly (необязательный параметр): если равно true, cookie будут доступны только через http протокол. То есть cookie в этом случае не будут доступны скриптовым языкам, например, JavaScript. По умолчанию параметр равен false


setcookie("language", $value2, time()+3600);  // срок действия 1 час

получаем
$_COOKIE["city"]


сохраняем массив, получаем как обычно
setcookie("lan[1]", "PHP");
setcookie("lan[2]", "C#");

удаление(время из прошлого)
setcookie ("city", "", time() - 3600);





#сессии  #session

session_start();
$_SESSION['city'] = "Сингапур";
isset($_SESSION['city'])//проверяем, используем как обычно

при запуске сессии в куки сохраняет id,name сессии

// идентификатор сессии
session_id(); 
//напрямую(тоже самое)
$_COOKIE['PHPSESSID'];
// имя - PHPSESSID
echo session_name();  




Уничтожение сессии
$_SESSION = array();
// уничтожение куки с идентификатором сессии
if (session_id() != "" || isset($_COOKIE[session_name()]))
    setcookie(session_name(), '', time()-2592000, '/');
session_destroy();





работа с #файлами #file #файлы
#fopen

resource      fopen(string $filename, string $mode)
$filename представляет путь к файлу, $mode - режим открытия
'r': файл открывается только для чтения. Если файла не существует, возвращает false
'r+': файл открывается только для чтения с возможностью записи. Если файла не существует, возвращает false
'w': файл открывается для записи. Если такой файл уже существует, то он перезаписывается, если нет - то он создается
'w+': файл открывается для записи с возможностью чтения. Если такой файл уже существует, то он перезаписывается, если нет - то он создается
'a': файл открывается для записи. Если такой файл уже существует, то данные записываются в конец файла, а старые данные остаются. Если файл не существует, то он создается
'a+': файл открывается для чтения и записи. Если файл уже существует, то данные дозаписываются в конец файла. Если файла нет, то он создается

$fd = fopen("form.php", 'r') or die("не удалось открыть файл");
fclose($fd);

считываем построчно

while(!feof($fd))//вернет true в конце файла
{
    $str = htmlentities(fgets($fd),ENT_QUOTES, 'UTF-8');//считывает 1 строку
//$str = htmlentities(fread($fd, 600),ENT_QUOTES, 'UTF-8');  // считываем 600 байт
    echo $str;
}


полностью прочитать файл(просто 1 строка, без открытия\закрытия и тд)

$str = htmlentities(file_get_contents("form.php"), ENT_QUOTES, 'UTF-8');



запись в файл
$fd = fopen("hello.txt", 'w') or die("не удалось создать файл");
$str = "Привет мир";
fwrite($fd, $str);
//fputs($fd, $str);//тоже самое что и fwrite
fclose($fd);



Работа с указателем файла

int fseek (resource $handle , int $offset [, int $whence = SEEK_SET ] )
Параметр $handle представляет дескриптор файла. Параметр $offset - смещение в байтах относительно начала файла, с которого начнется считывание/запись. Третий необязательный параметр задает способ установки смещения. Он может принимать три значения:
SEEK_SET: значение по умолчанию, устанавливает смещение в offset байт относительно начала файла
SEEK_CUR: устанавливает смещение в offset байт относительно начала текущей позиции в файле
SEEK_END: устанавливает смещение в offset байт от конца файла

В случае удачной установки указателя функция fseek() возвращает 0, а при неудачной установке возвращает -1.

$fd = fopen("hello.txt", 'w+') or die("не удалось открыть файл");
$str = "Привет мир!"; // строка для записи
fwrite($fd, $str); // запишем строку в начало
fseek($fd, 0); // поместим указатель файла в начало
fwrite($fd, "Хрю"); // запишем в начало строку




переместить файл

if (!rename("hello.txt", "subdir/hello.txt"))//перемещение в каталог
    echo "Ошибка перемещения файла";


копирование файла
if (copy("hello.txt", "hello_copy.txt"))
    echo "Копия файла создана";


Удаление файла
if (unlink("hello_copy.txt"))
    echo "Файл удален";

очистка файла
ftruncate($fd, 0);


Создание каталога

if(mkdir("newdir"))//в текущем каталоге, в корневом mkdir("/newdir")
    echo "Каталог создан";

Удаление каталога
if(rmdir("newdir"))
    echo "Каталог удален";


получения абсолютного пути к текущему каталогу
$path = getcwd();// C:\localhost



открывает определенный каталог для считывания из него информации о файлах и каталогах
При успешном открытии каталога функция возвращает дескриптор открытого каталога. После окончания работы с каталогом его надо закрыть функцией closedir().

Для считывания имени отдельного файла в открытом каталоге применяется функция readdir().

$dir = getcwd(); // получаем текущий каталог
 
if (is_dir($dir)) // является ли путь каталогом
{
    if ($dh = opendir($dir)) // открываем каталог
    {
        // считываем по одному файл или подкаталогу
        // пока не дойдем до конца
        while (($file = readdir($dh)) !== false) 
        {
            // пропускаем символы .. и .
            if($file=='.' || $file=='..') continue;
            // если каталог или файл
            if(is_dir($file)) echo "каталог: $file <br>";
            else echo "файл:    $file <br>";
        }
        closedir($dh); // закрываем каталог
    }
}



формирование очереди для работы с файлом

bool flock (resource $handle , int $operation [, int &$wouldblock ])
Первый параметр - дескриптор файла, возвращаемые функцией fopen().

Второй параметр указывает на тип блокировки. Он может принимать следующие значения:

LOCK_SH (или число 1): разделяемая блокировка (чтение файла)

LOCK_EX (или число 2): исключительная блокировка (запись файла)

LOCK_UN (или число 3): для снятия блокировки

LOCK_NB (или число 4): эта константа используется только вместе с одной из предыдущих в битовой маске (LOCK_EX | LOCK_NB), если не надо ждать пока flock() получит блокировку

//при блокировке, даже если надо делать запись, не рекомендуется использование 'w' и 'w+'
$fd = fopen("hello.txt", 'r+')
flock($fd, LOCK_EX)
...
flock($fd, LOCK_UN);
fclose($fd);





ОТПРАВКА файлов на сервер

изначальное ограничение 2 мегабайта, что бы изменить надо
//  в файле php.ini менять upload_max_filesize = 2M
//папка для временных файлов upload_tmp_dir = "C:/php/upload"



<form method="post" enctype='multipart/form-data'>
Выберите файл: <input type='file' name='filename' size='10' /><br /><br />

//несколько файлов в 1 форме
<input type='file' name='uploads[]' /><br />
<input type='file' name='uploads[]' /><br />



if ($_FILES && $_FILES['filename']['error']== UPLOAD_ERR_OK)//файл существует и ошибок нет
{
    $name = $_FILES['filename']['name'];
//из временного места перемещатся в каталог// путь к загруженному временному фуйлу и путь куда надо поместить файл
    move_uploaded_file($_FILES['filename']['tmp_name'], $name);
    echo "Файл загружен";
}

$_FILES['file']['name']: имя файла

$_FILES['file']['type']: тип содержимого файла, например, image/jpeg

$_FILES['file']['size']: размер файла в байтах

$_FILES['file']['tmp_name']: имя временного файла, сохраненного на сервере

$_FILES['file']['error']: код ошибки при загрузке


обработка нескольких файлов

foreach ($_FILES["uploads"]["error"] as $key => $error) {
        if ($error == UPLOAD_ERR_OK) {
            $tmp_name = $_FILES["uploads"]["tmp_name"][$key];
            $name = $_FILES["uploads"]["name"][$key];
            move_uploaded_file($tmp_name, "$name");
        }
    }













#include #require #подключение




//   ../  ищет файл в текущей директории
require//тоже самое что и include но при внутренней ошибке завершит выполнение а не просто предупреждение
include
если файл включался то не включится еще раз, если включить(через обычный include) 2 +раза то будет ошибка
require_once
include_once

подключение файла, область видимости подключаемого кода как у строки который подключает
include 'vars.php';

// Сработает.
include 'http://www.example.com/file.php?foo=1&bar=2';
//нужно без скобок,строка ниже правильная
if ((include 'vars.php') == TRUE)



этот кусок будет подключать файлы сам при обращении
просто в началей файла написать и путь подредактировать
spl_autoload_register(function ($class_name) {
//if (file_exists($className . '.php'))
    include $class_name . '.php';
});
вызовет функцию выше , она подключит класс(одноименный файл) и все будет работать
$obj  = new MyClass1();






return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // выведет 'PHP'

$bar = include 'noreturn.php';

echo $bar; // выведет 1 тк подключено успешно



goto

goto a;
echo 'Foo';
 
a:
echo 'Bar';







#обработка #ошибки
#try #catch #finaly
#Exception
throw new Exception("Невозможно загрузить $name.");

try {
    var_dump(sum(1, 2));
    var_dump(sum(1.5, 2.5));
} catch (TypeError $e) {
    echo 'Ошибка: '.$e->getMessage();
}



аналог params
для старых версий func_num_args(), func_get_arg() и func_get_args().
DateInterval- тип данных элеметов массива ...-- массив
function total_intervals($unit, DateInterval ...$intervals) {





a = 1;
$b =& $a;
$c = $b;
$c = 7; //$c не ссылка и не изменяет значений $a и $b
arr = array(1);
$a =& $arr[0]; //$a и $arr[0] ссылаются на одно значение
$arr2 = $arr; //присвоение не по ссылке!
$arr2[0]++;
/* $a == 2, $arr == array(2) */
/* Содержимое $arr изменилось, хотя было присвоено не по ссылке! */


var начинает ссылаться на другое значение а bar нет
function foo(&$var)
{
    $var =& $GLOBALS["baz"];
}
foo($bar); 


//b все еще указывает
$a = 1;
$b =& $a;
unset($a);













#Трейты  #trait #use


Наследуемый член из базового класса переопределяется членом, находящимся в трейте. 
Порядок приоритета следующий: члены из текущего класса переопределяют методы в трейте, 
которые в свою очередь переопределяют унаследованные методы.
можно use трейт в трейте

class Base {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait SayWorld1 {
    public function sayHello() {
        parent::sayHello();
        echo 'World!';
echo 'Hello'.$this->getWorld();
    }
//абстрактный метод для установления требований
abstract public function getWorld();

//статический метод, вызывается как обычный статический метод
 public static function doSomething() {
        return 'Что-либо делаем';
    }

//обычное свойство, используется как и обычное
Если трейт определяет свойство, то класс не может определить свойство с 
таким же именем, кроме случаев полного совпадения (те же начальное значение и модификатор видимости)
public $x = 1;


}

class MyHelloWorld extends Base {
    use SayWorld1,...2,...3;

//реализуем абстрактный метод тк он был задан в трейте
public function getWorld() {
        return $this->world;
    }
}

$o = new MyHelloWorld();
$o->sayHello();



Для разрешения конфликтов именования между трейтами, используемыми в одном и том же классе, необходимо использовать оператор insteadof для того, чтобы точно выбрать один из конфликтующих методов.

use A, B {
        B::smallTalk insteadof A;//разрешение конфликтов
        A::bigTalk insteadof B;//разрешение конфликтов
        B::bigTalk as talk;//просто устанвливаем псевданим?
}
//меняем область видимости
use HelloWorld { sayHello as protected; }
//и то и то
use HelloWorld { sayHello as private myPrivateHello; }




















#SQL IN #PHP



//для локального сервера
$host = 'localhost'; // адрес сервера 
$database = 'compstore'; // имя базы данных
$user = 'root'; // имя пользователя
$password = '1234567'; // пароль


$link = mysqli_connect($host, $user, $password, $database) 
    or die("Ошибка " . mysqli_error($link));
// выполняем операции с базой данных

// закрываем подключение
mysqli_close($link);

//безопасное получание данных
htmlentities("Кириллица", ENT_QUOTES, 'UTF-8')
$name = htmlentities(mysqli_real_escape_string($link, $_POST['name']),ENT_QUOTES, 'UTF-8');


//получаем id последней вставленной записи
$obj->id=mysqli_insert_id();

     




$query ="SELECT * FROM phones";
$result = mysqli_query($link, $query) or die("Ошибка " . mysqli_error($link)); 
//Функция mysqli_query() возвращает объект $result, который содержит результат запроса. В случае неудачи данный объект содержит значение false.
if($result)
    echo "Выполнение запроса прошло успешно";
//для нормальной обраточки результата(в виде массива с столбцами ключами) ниже еще есть пример построчно
$data=mysqli_fetch_all($result,1);


обрабатываем результат
 $rows = mysqli_num_rows($result); // количество полученных строк при select

 for ($i = 0 ; $i < $rows ; ++$i)//идем по каждой строке результата
    {
//считываем одну строку, массив полей, доступ как к обычному массиву int, возвращается массив даже в случае выборки 1 поля
        $row = mysqli_fetch_row($result);
        echo "<tr>";

//получаем по порядку ячейки строки(поля)
            for ($j = 0 ; $j < 3 ; ++$j) echo "<td>$row[$j]</td>";
        echo "</tr>";
    }




#php #sql    #sql #php


русские буквы
mysql_query("SET NAMES utf8 COLLATE utf8_unicode_ci");

$connect=mysqli_connect("localhost","root","","bd_inter_v");
$result=mysqli_query($connect,$sql_code_string);
//преобразуем ответ в массив с доступом по [0] [1] 
$data=mysqli_fetch_all($result);
//преобразуем в массив с доступом по ["column_name"]
$data=mysqli_fetch_all($result,1);



$result = $pdo->query("SELECT id, name, salary FROM employees");
while (list($id, $name, $salary) = $result->fetch(PDO::FETCH_NUM)) {
    echo " <tr>\n" .
          "  <td><a href=\"info.php?id=$id\">$name</a></td>\n" .




function small_numbers()
{
    return array (0, 1, 2);
}
list ($zero, $one, $two) = small_numbers();











#namespace

// перед namespace ничего(ни <html> ни что либо другое) не может быть кроме declare
PHP-код не может находиться вне скобок конструкции пространства имен, кроме начального выражения declare.
<?php
namespace MyProject;
namespace MyProject\Sub\Level;//определяем вложенность(подуровни)
для определения нескольких в 1 файле
namespace MyProject{код}

namespace {  //глобальное пространство имен



использования из namespace
$a = new foo();//текущее 
$a = new subnamespace\foo(); // ищет namespace с текущем и обращается через него
$a = new \currentnamespace\foo();   //обсолютный путь
???
namespace\Foo\Bar

вызвать функцию из namespace
namespace\func();

//use должно быть в namespace, не может быть в функции и тд
создание псевдонима, вызывается через mine
use blah\blah as mine;

use function My\Full\functionName,...,...,...;


групировака и подключение
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};

#__NAMESPACE__
это строка, которая содержит имя текущего пространства имен. В глобальном пространстве, вне пространства имен, она содержит пустую строку.



для понимания

namespace A\B\C;

/* Эта функция является A\B\C\fopen */
function fopen() { 
     /* ... */
     $f = \fopen(...); // вызов глобальной функции fopen
     return $f;
} 





#catch

главный класс Exception
trow new Exception("");

обработка нескольких
try {
            throw new MyException();
        } catch (MyException | MyOtherException $e) {
            var_dump(get_class($e));
        }








#генераторы #yield





function gen_one_to_three() {
    for ($i = 1; $i <= 3; $i++) {
        // Обратите внимание, что $i сохраняет свое значение между вызовами.
//ключ значение
// yield $id => $fields;
        yield $i;
//yield; возвращаем null но как результат(тип массив с элементами null который можно перебирать)
//yield from [3, 4];  аналогично 2м , сначала 3 и следом 4
//yield from eight();   //в функции тоже yield ы 
    }
}

$generator = gen_one_to_three();
foreach ($generator as $value)
//value === 1,2,3

можно возвращать ссылку также как и с функцией, изменив переменную возвращенную из такой! функции она изменится в функции





#float
функции для работы
http://php.net/manual/ru/ref.bc.php

#round
округляет по правилам округления, оставляет указанное количество знаков после запятой
round($num,$after);








min\max
находит число в массиве(можно передать просто параметрами)


#denwer #denver
создать папку Z:\home в ней папку www в нее файлы
рестартнуть денвер

http://localhost/denwer/






































