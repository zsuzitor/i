

 structures (структуры),
"number",
тип numbers в Typescript €вл€ютс€ числом с плавающей точкой

 "string",
может быть многострочна€ строка через обратные построфы или кавычки(`)
 "boolean", или "symbol", void;

let isDone: boolean = false;


/
function padLeft(value: string, padding: string | number)
function padLeft(value: string, padding: any) {
//#typeof
    if (typeof padding === "number") {//"string"
        return Array(padding + 1).join(" ") + value;
    }
    
}





#array 

let list: number[] = [1, 2, 3];
//или через обобщени€
let list: Array<number> = [1, 2, 3];
</number>


#join
//создать строку с пробелами длинной 10 символов
 Array(10).join(" ");





#Tuple 
let x: [string, number];
// ≈го инициализаци€
x = ['hello', 10]; // OK
//так можно получить элемент
x[0]





#Enum 

enum Color {Red, Green, Blue};
//enum Color {Red = 1, Green, Blue};
let c: Color = Color.Green;
let colorName: string = Color[2];




#any

полный функционал #dynamic
let notSure: any = 4;
notSure = "maybe a string instead";
notSure = false; // ok, это определенно boolean



#object
Ќо переменные типа Object позвол€ют вам только присваивать им любое значение. 
¬ы не можете вызывать у них необъ€вленные методы, даже те, которые могут существовать на этапе исполнени€ программы

let prettySure: Object = 4;




#void
function warnUser(): void {
    alert("This is my warning message");
}
//
let unusable: void = undefined;//или =null и все





#throw 
throw new Error(`ќжидал строку или число, а получил '${padding}'.`);



псевдоним типа 
ype Name = string;
type NameResolver = () => string;






#interface

interface Bird {
    fly();
    layEggs();
}
 
interface Fish {
    swim();
    layEggs();
getPaddingString(): string
}
 
function getSmallPet(): Fish | Bird {
    // ...
}
 
let pet = getSmallPet();
pet.layEggs(); // ок
pet.swim();    // ошибка




//вот так приведет к ошибке
pet.swim
//но можно вот так
if ((<fish>pet).swim) 
    (<fish>pet).swim();




#is #as

let someValue: any = "this is a string";
let strLength: number = (<string>someValue).length;
</string>

let someValue: any = "this is a string";
let strLength: number = (someValue as string).length;


вот такой функцией можно проверить соответствует ли объект классу
function isFish(pet: Fish | Bird): pet is Fish {
    return (<fish>pet).swim !== undefined;
}
function isNumber(x: any): x is number {
    return typeof x === "number";
}




#class

class SpaceRepeatingPadder implements Padder {
    constructor(private numSpaces: number) { }
    getPaddingString() {
        return Array(this.numSpaces + 1).join(" ");
    }
}






































































































































































