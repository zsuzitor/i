#docker

#image- образ
#container -Контейнер 
Контейнер запускается путем запуска образа

image-это исполняемый пакет, который включает в себя все необходимое для запуска приложения:
 код, среду выполнения, библиотеки, переменные среды и файлы конфигурации. это еще не запущенное упакованное приложение

Контейнер-это экземпляр образа во время выполнения-то, что образ становится в памяти при выполнении --- (что то типо процесса ).
это что то типо виртуальной машины(или 1 exe файла), мы нажимаем 1 кнопку-> все запускается
это экземпляр(запущенный) для image, если запусть один и тотже image 3 раза то получим 3 контейнера
работает пока работает приложение, после этого контейнер останавивается НО не удаляется
контейнер полностью изолирован, поэтому если нужен какой то доступ к нему его надо явно указать. в случае веб сервиса надо открыть порт



docker compose - технология для управления контейнерами
Она существует поверх докера и просто позволяет управлять контейнерами на основе единого конфигурационного файла, в котором описаны контейнеры, их параметры и их взаимосвязи



docker images - посмотреть созданные image
docker ps - посмотреть запущенные контейнеры
docker ps -a - просмотреть остановленные контейнеры
docker build - создать image
docker run - запустить контейнер
==
-v {path:path2} - вот так можно указать, что в контейнере будет расшарена папка с внешней системой, тоесть мы например в эту папку(как в обычную) пишем логи, а читаем на внешней машине. это аналог docker #volumes
==
docker rm - удалить контейнер
docker rm $(docker ps -qa) - удалить все контейнеры
docker rmi - удалить image
docker rmi $(docker images -q)
docker stop - остановить контейнер
--rm можно добавить например к build или к run, если не добавить то не будет удалять старое, а будет создавать новое(старое вроде останется и будет висеть)



можно открыть bash консоль докера
docker exec -t -i <docker_container_id> /bin/bash
и там уже как в файловой системе линукса что то мутить
например 
посмотреть список файлов: 
ls
find






#dockerfile
from - язык+версия
run - команды которые надо выполнить перед запуском, например установка пакетов
workdir - это папка в которую мы перейдем\рабочая папка
copy - копирует,
cmd - то что надо сделать когда контейнер будет запущен
explose 8080 - декларируем что порт будет открыт для доступа извне, это не делает его открытым. см команду -p//// docker run -p 8080:80  /// вот так мапим порт контейнера на порт внешней системы
env [TZ Europe/Moscow] - создать переменную окружения, в данном случае указываем часовой пояс. ее еще можно передать как параметр при запуске контейнера через параметр "-e"



удалять контейнеры
удали контейнеры. в консоли:

docker ps -a

потом

docker rm id_контейнера
удаление образов
docker images
docker rmi id_образа


#error
1:
выключить докер
убить все процессы
запустить докер

2:
Remove images-
docker rmi $(docker images -q)
Remove containers-
docker rm $(docker ps -a -q)

еще уделение volumes
delete volumes---->>>
docker volume rm $(docker volume ls -qf dangling=true)
docker volume ls -qf dangling=true | xargs -r docker volume rm

delete networks---->>>
$ docker network ls  
$ docker network ls | grep "bridge"   
$ docker network rm $(docker network ls | grep "bridge" | awk '/ / { print $1 }')


Resize disk space for docker vm
$ docker-machine create --driver virtualbox --virtualbox-disk-size "40000" default






#
docker compose config
version: "3.9" // версия
volumes://volumes которые будут использоваться
 volume_name:











https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-3.1


в папке проекта создать файл "Dockerfile"

PostsInSocialPattern - название проекта
содержимое:

FROM mcr.microsoft.com/dotnet/core/sdk:2.2 AS build
WORKDIR /app

# copy csproj and restore as distinct layers
COPY *.sln .
COPY PostsInSocialPattern/*.csproj ./PostsInSocialPattern/
RUN dotnet restore

# copy everything else and build app
COPY PostsInSocialPattern/. ./PostsInSocialPattern/
WORKDIR /app/PostsInSocialPattern
RUN dotnet publish -c Release -o out


FROM mcr.microsoft.com/dotnet/core/aspnet:2.2 AS runtime
WORKDIR /app
COPY --from=build /app/PostsInSocialPattern/out ./
ENTRYPOINT ["dotnet", "PostsInSocialPattern.dll"]




скомпилить проект 
"docker build -t aspnetapp ."
поднять проект "docker run -it --rm --name aspnetcore_sample aspnetapp"
"

ip для доступа(не для доступа, это шуточный ip) можно посмотреть так , будет поле называться "IPAddress"
"docker inspect service_name"

для того что бы локально развернуть докер(вместо получения ip)надо:
Program->Main->
как то добавить такую штуку webBuilder.UseUrls("http://*:5000/");
возможно так, если уже есть такая функция
public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
					webBuilder.UseUrls("http://*:5000/");
                });

и тогда скомпилить проект ("docker build -t <imagename> .")
и запустить "docker run -it -p 5000:5000 <imagename>"
доступ можно получить так
http://127.0.0.1:5000/
http://localhost:5000/
тут еще есть какая то инфа https://stackoverflow.com/questions/41709354/docker-ip-for-windows







































